<< 리스트 >> 

리스트는 데이터들을 잘 관리하기 위해 묶어서 관리할 수 있는 자료형 중 하나 
관리를 위해 리스트 안에 집합된 요소들은 순서가 정해져 있음
  ==> 순서가 있는 자료형을 시퀀스라고 함
  ==> 순석가 있기 때문에 인덱싱 (특정 위치의 값 불러오기), 슬라이싱 (특정 범위의 값 불러오기) 등이 가능
리스트 안에는 여러 자료형이 동시에 존재할 수 있음 (int, str, float, bool, list 등)

포맷은 아래와 같음: 
  list=[요소1, 요소2,...요소n]
리스트는 파이썬 기본 단계에서 가장 많이 사용되는 자료형

리스트 메서드:
- 리스트 추가:
    1) 리스트명.append(요소1)
    2) 리스트명.extend(요소 여러개)
    3) 리스트명.insert(인덱스,요소1)
- 리스트 수정:
    1) 리스트명.[인덱스]=수정 값
- 리스트 삭제:
    1) del 리스트명[삭제할 요소의 인덱스]
    2) 리스트명.remove(삭제할 요소)
        *** remove 메서드의 경우 리스트에서 특정 값을 갖는 첫 번째 요소를 삭제함. 
          동일 값이 있을 경우 .remove() 사용 주의 필요
- 리스트 요소 순서 정렬:
  (a) Ascending order
    1) 리스트명.sort()
    2) 리스트명1=sorted(리스트명2)
  (b) Descending order
    1) 리스트명.sort(reverse=True)
    2) 리스트명1=sorted(리스트명2, reverse=True)
    *** sort() 는 리스트의 객체 내장 메서드이고, sorted() 는 내장 함수여서 사용법과 반환 값이 다름.
    *** sort()의 괄호 안은 비어있음 
    *** sort() 메서드는 원본 리스트를 정렬하며, 새로운 리스트를 생성하지 않음 (원본이 변경됨). 
        따라서 할당된 값은 None이 나옴
    *** sorted() 함수는 원본 리스트를 변경하지 않고 새로운 정렬된 리스트를 반환하기 때문에 
        None이 아니라 새로운 리스트가 할당됨
  (c) 순서 뒤집기
    1) list.reverse(리스트명)
    2) 리스트명[::-1]
        *** [::-1]의 -1이 현 순서에서 반대로 
        *** [::-2]라면 현 순서에서 반대로, 1칸씩 띄어서
        *** [3::-3]이라면 현 리스트에서 3번 인덱스의 요소부터 역방향으로 2칸씩 띄면서 끝까지 출력
- 리스트 특정 요소의 인덱스 값 추출:
    1) 리스트명.index(요소)
        *** 요소가 중복되더라도 해당되는 첫번째 요소의 인덱스만 반환
    2) ~ in enumerate(리스트)
        *** 활용 방식 다양함. 주로 for문과 함께 사용

리스트 컴프리헨션:
리스트 컴프리헨션은 리스트를 직관적으로 짧고 간편한게 생성하는 방법
- 기본 구조:
    [표현식 for 아이템 in 이터러블]
      *** 파이썬에서 '이터러블 (iterable)'은 말 그대로 "반복 가능한" 것을 의미. 
          즉, 반복 가능한 데이터/객체에 적용되는 의미 
      e.g. squares=[i**2 for i in range(10)]
           결과: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
            ==> squares 라는 리스트를 작성하는데,
                이 리스트 안에 0~9까지의 숫자를 각각 제곱하여 넣기

- 조건문 포함: 
    [표현식 for 아이템 in 이터러블 if 조건]
      ==> for 루프 뒤에 if 조건문이 위치하고, if 조건에 맞는 요소라면 새로운 리스트에 포함시킴
      e.g. [i for i in range(10) if i % 2 == 0]

============================================

<< 튜플 (Tuple) >>

튜플은 요소의 추가, 수정, 삭제 등이 변경 불가능한 순서가 있는 컬렉션. 
리스트의 '읽기 버전' 같음
프로그램에서 그 값이 항상 변하지 않아야 할 경우 사용

포맷은 아래와 같음:
tuple=(요소1,요소2,...,요소n)
*** 다만, tuple=요소1,요소2,...,요소n 처럼 ( )를 치지 않더라도 튜플로 인식함

- 튜플에 요소가 1개인 경우 해당 요소 뒤에 콤마 (,) 찍어줘야 함. 그렇지 않으면 int로 인식됨
      e.g. tuple1=(1, ) <== tuple
           tuple1=(1) <== int
- 튜플에 담긴 요소를 개별 변수로 따로 담고 싶을 경우 :
    변수1, 변수2, 변수3 = 튜플명 
      e.g. colors=('red','green','blue')
           r,g,b=colors
            ==> r='red', g='green', b='blue' 가 들어가게 됨

============================================

<< 딕셔너리/사전 (Dictionary)>>

키와 값이 하나의 요소로 되어 있는 순서가 없는 집합 
추가, 수정, 삭제 가능함 

포맷은 아래와 같음:
dictionary1={키1:값1, 키2:값2, ..., 키n:값n}

- 추가: 
    딕셔너리명['추가할 키']=추가할 값
- 수정:
    딕셔너리명['수정할 키']=수정할 값
- 삭제:
    del 딕셔너리명['삭제할 키']

============================================

<< 집합/세트 (Set) >>


- 합집합 구할 때:
    집합1 & 집합2
- 교집합 구할 때:
    집합1 | 집합2
- 차집합 구할 때:
    1) 집합1 - 집합2
    2) 집합1.difference(집합2)
    
    e.g. 
      s1=set([1,2,3,4,5,6])
      s2=set([4,5,6,7,8,9])
      print(s1|s2) # 합집합
      print(s1&s2) # 교집합
      print(s1-s2) # 차집합


============================================

<< 논리 (True, False) >>


============================================


