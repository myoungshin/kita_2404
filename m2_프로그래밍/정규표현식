<< 정규표현식 >>
정규식은 파이썬에 내장된 매우 작고 고도로 특수화된 프로그래밍 언어
RE, regexes 또는 regex 패턴이라고도 불림
특정 패턴을 찾거나 검색, 치환하는데 사용되는 문자열
아래처럼 re 모듈을 통해 사용할 수 있음 
  import re

<< 정규표현식 활용도 >>
1. 문자열 검색 및 매칭 
특정 패턴과 일치하는 문자열을 찾을 때 사용
  e.g. 이메일 주수나 전화번호처럼 특정한 형식의 문자열을 찾을 때
  e.g. 특정 단어나 문구를 검색할 때 

2. 문자열 치환 (A --> B로 바꾸기)
특정 패턴과 일치하는 문자열을 다른 문자열로 대체할 때 사용
  e.g. 모든 숫자를 제거 
  e.g. 특정 형식의 문자열을 다른 형식으로 바꾸기

3. 문자열 분리
특정한 패턴을 기준으로 문자열을 분리할 때 사용
  e.g. 쉼표로 구분된 문자열을 파싱할 때 사용
        ** 문자열 파싱 (parsing) : 
            - 주어진 문자열에서 원하는 정보를 추출하거나 분석하는 과정
              e.g. 웹페이지의 HTML 소스 코드를 가져와서 원하는 데이터를 추출하거나, 특정 형식의 로그 파일에서 특정 정보를 찾아내는 경우 
            - 일반적으로 정규표현식이나 문자열 메서드 (.split(), .find(), .replace() 등)을 사용하여 수행 

<< 정규표현식의 기본 구성 요소 >>
1. 리터럴 (literals) : 일반 텍스트 문자 
    e.g. a,b,1,2,3, ...
2. 메타 문자 (meta characters): 특별한 의미를 가지는 문자들
    e.g. ., ^, $, *, +, ...
3. 특수 시퀀스 (special sequences) : 역슬래시+알파벳으로 구성되어 있으며 특정 의미를 가짐 
    e.g. \d, \D, \s, \S, ...


<< 메타 문자 (Meta Characters) >>
정규표현식의 핵심 요소
문자가 가지는 원래의 의미가 아닌 특별한 용도로 사용되는 문자들:

  . : 문자열 내의 임의의 한 문자를 의미. 단, \n은 제외
      ** \n을 포함시키고 싶다면 re.DOTALL 을 사용해야함
      ==> 정규표현식 'a.c'는 문자열 내에서 'a'와 'c' 사이에 어떤 문자 하나가 있다는 것을 의미함
            해당되는 예시:
            e.g. abc, a*b, a3b
            불일치하는 예시:
            e.g. a\nc, ac
                ==> a\nc : \n은 제외대상이라 안되고
                ==> ac : a와 c 사이에 어떠한 문자가 존재해야하는데 아무것도 없어서 불일치
      ==> re.DOTALL 케이스:


  ^ : 문자열의 시작. '캐럿'이라고 불림
      ==> 패턴이 ^Hello 라면 문자열에서 Hello로 시작되는 것과 일치하는지를 봄
            해당되는 예시: 
            e.g. Hello world
                ==> Hello world의 시작이 Hello여서 일치
            불일치하는 예시:
            e.g. world, Hello
                ==> world, Hello의 시작은 world라서 불일치
            e.g. hello world
                ==> hello의 h가 소문자여서 다른 문자열로 인식됨. 따라서, 불일치.
  $ : 문자열의 끝과 일치
      문자열의 끝에 $ 표기가 붙고, $표기가 붙은 문자열이 특정 문자열의 끝에 있는지를 봄 (e.g. end$, send$)
      ==> 패턴이 end$ 라면
        해당되는 예시:
        e.g. It's the end
        불일치하는 예시:
        e.g. end of the story
          ==> 'end'가 문자열 끝에 있지 않아서 불일치   
  * : *의 앞에 오는 문자들 중 0개를 포함하여 몇 개가 오든 모두 매치됨
        ==> 패턴 : lo*l 
          해당되는 예시:
          e.g. ll
            ==> o이 없어도 매칭이 됨. "0개를 포함하여"이니까.
          e.g. lol
          e.g. looooool
          불일치하는 예시:
          e.g. lbl
            ==> b는 매칭 대상이 아닌데 있어서 불일치 
          e.g. loooooooooooooboooooool
            => l앞에 lo 외의 다른 문자가 있으면 불일치인데 b가 있음

  + : +의 앞에 오는 문자가 1번 이상 반복되어야 매칭됨
        ==> 패턴 : lo+l
          매칭 예시:
          e.g. loooool:
          ==> l이 1번 o가 1번 이상이라서 매칭됨
          불일치 예시:
          e.g. ll:
            ==> o가 없음. 따라서, 불일치
          e.g. lo:
            ==> lo+l에서 lo는 1번씩 있는데 마지막 l이 부재. 따라서 불일치
                ** + 앞의 문자들의 반복 횟수도 보지만 +뒤에 붙은 문자의 존재도 함께 봄
  ? : ? 앞의 문자가 0번 또는 1번 등장 (없거나 하나가 있을 때 매칭)
        ==> 패턴 : lo?l
          매칭 예시:
          e.g. ll
          e.g. lol
          불일치 예시:
          e.g. lool

  {m,n} : {}앞의 문자가 최소 m번, 최대 n번 반복
        ==> 패턴 : lo{3,5}l
          매칭 예시:
          e.g. loool
          e.g. loooool
          불일치 예시:
          e.g. loooooooool
          e.g. ll
          e.g. lol

  [] : 대괄호 안의 문자 중 하나와 일치함
        ==> 패턴 : [abc]
          매칭 예시:
          e.g. a
               boy
               cat
               ==> [] 안에 있는 a,b,c 중 하나가 들어 있음 
          불일치 예시:
               dog
               egg
               ==> 매칭하고자 하는 문자열 안에 [] 안에 있는 a,b,c 중 하나라도 없음 
  | : '파이프'라고 불림
      or의 조건       
        ==> 패턴 : a|b
          매칭 예시:
          e.g. a
          e.g. b
          불일치 예시:
          e.g. c
  () : 그룹화, 캡쳐 그룹
       괄호 안의 문자를 하나로 묶어서 봄 
         ==> 패턴: (a|b)c
            매칭 예시:
            e.g. ac, bc
            ==> 캡쳐 그룹안에 or 조건이 들어가서 a혹은 b 중 하나라도 들어가야 함
                () 안에 없는 문자열이더라도 () 안에 있는 문자열과 함께라면 매칭

