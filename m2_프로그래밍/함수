<< 사용자 함수 >>

파이썬에서 특정 기능을 수행해 주는 것이 함수.
함수에도 크게 5가지 종류가 있음:
1. 내장 함수 (built-in functions)
2. 외장 함수 (external functions)
3. 외부 라이브러리/패키지 
4. 사용자 함수 (user-defined functions)
5. 람다 함수 (lambda functions)

============================================

<< 내장 함수 >>

파이썬에서 기본적으로 제공하는 함수.
별도의 모듈을 import하지 않고도 사용 가능
자주 사용하는 내장 함수로는 print(), input(), int() 등이 있음

============================================

<< 외장 함수 >>

표준 라이브러리에 포함ehls 모듈과 함수를 가리키는 것으로 모듈을 import하여 사용
파이썬 표준 라이브러리의 os, sys, math, random, datetime 등의 모듈에는 다양한 외장 함수가 포함
==> 표준 라이브러리는 별도 설치 불필요
    *** 표준 라이브러리 공식 페이지: https://docs.python.org/ko/3.10/library/index.html
==> 사용 필요 시 아래처럼 import + 함수명 써야 함
  e.g.
  import random

============================================

<< 외부 라이브러리/패키지 >>

사용하려면 해당 라이브러리/패키지 설치 필요
설치 후 외장 함수와 마찬가지로 필요한 모듈을 import하여 사용
자주 사용하는 라이브러리/패키지:
  numpy : 딥러닝에서 많이 사용
  pandas : 데이터 전처리 때 많이 사용
  requests : 데이터 수집/전처리에서 많이 사용

설치 및 사용 방법:
  !pip install pandas # 판다스 라이브러리 설치 
  import pandas as pd # import 후 사용 가능 
  실행할 내용 입력 

============================================

<< 사용자 함수 >>

사용자가 직접 생성하여 사용하는 함수 
4가지 형태가 있음
- 입력값, 출력값 모두 존재하는 경우
- 입력값만 존재하는 경우
- 출력값만 존재하는 경우
- 입출값, 출력값 모두 없는 경우
  *** 함수에서 출력값은 return으로 지정해줘야 함. print 사용 시 None이 반환됨 
함수의 반환값은 무조건 1개임. 
   - 여러개가 출력되도록 설정 가능하지만, 여러 결과값이 있을 경우 튜플 값 하나로 묶여서 나옴
      e.g.
      def add_and_mul(a,b):
          return a+b, a*b
      
      result=add_and_mul(3,4)
      print(result)
      ==> 결과 : (7, 12)


기본 포맷은 아래와 같음:
    def 함수명 (매개변수1, ..., 매개변수n):
        수행할 기능 작성
            return 결과값 

    e.g. def compare_num(threshold)
            for number in numbers:
              if threshold<number:
                return True
            return False
          ==> threshold 의 숫자가 numbers에 있는 숫자보다 작다면 True를 반환,
              그렇지 않다면 False를 반환
          *** 사용자 함수는 return을 한번만 하기 때문에 
              else: 
                return False를 넣게 되면 
              처음에 반복문이 돌 때의 숫자가 false라면 false를 반환하고 끝남. 
              따라서 의도와 다른 값이 나오게 됨

============================================

<< lambda 함수 >>

이름 없는 간단한 함수를 정의할 때 사용하는 익명의 함수
lambda 키워드를 사용하여 한 줄로 함수를 정의
주로 간단한 연산이 필요할 때 사용
재활용 가능

기본 형태:
  변수명=사용할 함수(lambda 임의변수명:실행할 내용, 참조할 자료)

  e.g. 
    multiply=lambda x,y: x*y # : 뒤에 붙은게 기능, 그 앞에 붙은게 변수
    print(multiply(3,4)) # 출력: 12
  e.g. 
    numbers=[1,2,3,4,5]
    squared_numbers=map(lambda x:x*x, numbers)
    print(list(squared_numbers))
      ==> 결과 : [1, 4, 9, 16, 25]
  e.g. 
    filtered_number=filter(lambda x:x%2==0,numbers)
    print(list(filtered_number))
      ==> 결과 : [2, 4]

  e.g.
    words = ["hello", "world", "python", "map"]
    words_upper=map(lambda x:x.upper(), words)
    print(list(words_upper))
      ==> 결과 : ['HELLO', 'WORLD', 'PYTHON', 'MAP']

============================================
============================================

<< zip 함수 >>

여러 개의 이터러블(리스트, 튜플 등)을 인자로 받아, 동일한 인덱스에 있는 요소들을 하나의 튜플로 묶어서 이터레이터를 반환
데이터를 병렬로 처리할 때 유용
일반적인 형식: 
  변수명2=zip(이터러블1, 이터러블2)

  e.g.
  list1=[1,2,3,4]
  list2=['a','b','c','d']
  zipped=zip(list1,list2) # list1과 list2의 동일 인덱스들을 하나로 튜플로 묶어줌
  print(list(zipped))

  e.g.
  # Q. 두 개의 리스트(이름과 성)를 사용하여 각 사람의 전체 이름을 생성하세요.
  first_names=['John','Jane','Corey','Travis']
  last_names=['Doe','Smith','Turner','williams']
  
  full_names=[first+" "+last for first,last in zip(first_names, last_names)]
  print(full_names)

============================================

<< map 함수 >>
여러 개의 데이터를 받아서 각각의 요소에 함수를 적용한 결과를 반환하는 내장 함수
리스트, 튜플 등의 반복 가능한(iterable) 객체를 입력으로 받을 수 있음

기본 형식:
   map(function,iterable 1, ..., iterable n)
   e.g.
   words = ["hello", "world", "python", "map"]
   upper_words=list(map(str.upper, words)) # str.upper는 문자열의 모든 문자를 대문자화 시키는 메서드
   print(upper_words)
   ==> 결과: ['HELLO', 'WORLD', 'PYTHON', 'MAP']

============================================

<< title 함수 >>
입력된 영문의 각 단어의 첫 알파벳을 대문자화 시켜줌
기본 형식: 
   변수명1=변수명2.title()
   e.g.
      wiyname=input('이름을 영어로 입력하세요 : ')
      txt=wiyname.title()
      print(f'당신의 정식 영문 이름은 {txt}입니다')
      ==> 결과 : 이름을 영어로 입력하세요 : tessa rose
                 당신의 정식 영문 이름은 Tessa Rose입니다

============================================

<< capitalize 함수 >>
문자열의 첫번째 문자만 대문자로, 나머지는 소문자로 반환해줌

기본 형식: 
변수명1=변수명2.capitalize()
   e.g.
   txt1='A lot of Things occur each day.'
   ret3=txt1.title()
   ret4=txt1.capitalize()
   print(ret3)
   print(ret4)
   ==> 결과 : A Lot Of Things Occur Each Day.
   ==> 결과 : A lot of things occur each day.

============================================

<< strip 함수 >>
문자열에서 공백을 제거하는 함수
좌측, 우측, 양측의 공백 제거 가능

기본 형식:
   좌측 공백 제거:
   변수명1=변수명2.lstrip()
   
   우측 공백 제거:
   변수명1=변수명2.rstrip()
   
   양측 공백 제거:
   변수명1=변수명2.strip()
      e.g.
      txt='   양쪽에 공백이 있는 문자열입니다.   '
      ret1=txt.lstrip() # 왼쪽 공백 제거
      ret2=txt.rstrip() # 오른쪽 공백 제거
      ret3=txt.strip() # 양쪽 공백 제거
      print('<'+ret1+'>')
      print('<'+ret2+'>')
      print('<'+ret3+'>')

============================================

<< join 함수 >>

문자열을 이어주거나 혹은 특정 문자로 결합시켜줌

기본 형식:
   변수명1='조인시킬 문자/기호'.join(변수명2)
   e.g. 
   loglist=['2016/08/26 10:12:11', '200','OK', '이 또한 지나가리라']
   bond=':'
   log=':'.join(loglist)
   print(log)
   ==> 결과 : 2016/08/26 10:12:11:200:OK:이 또한 지나가리라

   e.g. 공백 없이 문자들 붙이기:
   변수명=''.join(글자 붙일 변수명) 
   *** for문에서 각 문자별로 받을 때 사용 가능

============================================

<< replace 함수 >>
특정 문자열을 다른 문자열로 바꿔줌

기본 형식:
   변수명1=변수명2.replace('기존 문자','바꿔줄 문자')
   e.g.
   txt='My password is 1234'
   ret1=txt.replace('1','0')
   ret2=txt.replace('1','python')
   
   print(ret1)
   print(ret2)
   ==> 결과 : My password is 0234
   ==> 결과 : My password is python234

   e.g.
   txt2='매일 많은 일들이 일어납니다.'
   ret3=txt2.replace("많은 일들이", "아침 일찍")
   print(ret3)
   ==> 결과 : 매일 아침 일찍 일어납니다.

============================================

<< clear 함수 >>
리스트 안의 값을 전부 비워줌

기본 형식: 
   변수명.clear()
   e.g. 
   list1=[0,1,2,3,4,5,6]
   list1.clear()
   print(list1)
   ==> 결과 : []

============================================

<< chr 함수 >>
문자 코드값을 (아스키 코드) 문자로 반환해주는 함수

기본 형식:
변수명1=chr(변수명2)
   e.g. 
   val=int(input('문자 코드값을 입력하세요 : '))
   ch=chr(val)
   print('코드값: %d 문자: %s' %(val, ch))
   ==> 결과 : 문자 코드값을 입력하세요 : 65
   ==> 결과 : 코드값: 65 문자: A

============================================

<< isalpha 함수 >>
문자열이 문자인지 검사해줌
문자열로만 이루어졌을 경우 True, 문자 외의 것이 섞여 있을 경우 False를 반환

기본 형식:
변수명1=변수명2.isalpha()
   e.g.
   txt1='A'
   txt2='안녕'
   txt3='Warcraft Three'
   txt4='3PO'
   ret1=txt1.isalpha()
   ret2=txt2.isalpha()
   ret3=txt3.isalpha()
   ret4=txt4.isalpha()
   print(ret1) # 문자만
   print(ret2) # 문자만
   print(ret3) # 문자+공백
   print(ret4) # 문자+숫자
   ==> 결과 : True
   ==> 결과 : True
   ==> 결과 : False
   ==> 결과 : False

============================================

<< isdigit 함수 >>
문자열이 숫자인지 검사 
숫자만 있을 경우 True, 숫자 외의 것이 섞여 있을 경우 False를 반환

기본 형식:
변수명1=변수명2.isdigit()
   e.g.
   txt1='010-1234-5678'
   txt2='R2D2'
   txt3='1212'
   ret1=txt1.isdigit() # 숫자+특수문자
   ret2=txt2.isdigit() # 숫자+문자
   ret3=txt3.isdigit() # 숫자만
   print(ret1)
   print(ret2)
   print(ret3)
   ==> 결과 : False
   ==> 결과 : False
   ==> 결과 : True

============================================

<< isalnum 함수 >>
문자열이 문자 혹은 숫자인지 검사
영어, 한글 혹은 숫자로 되어 있다면 True, 아니라면 False를 반환

기본 형식:
변수명1=변수명2.isalnum()
   e.g.
   txt1='안녕하세요?'
   txt2='1. Title-제목을 넣으세요'
   txt3='3피오R2D2'
   txt1_test=txt1.isalnum() # 문자+특수문자
   txt2_test=txt2.isalnum() # 숫자+특수문자+공백+문자
   txt3_test=txt3.isalnum() # 숫자+문자
   print(txt1_test, txt2_test, txt3_test)
   ==> 결과 : False False True

============================================
============================================
============================================


<< datetime 모듈 >>
날짜와 시간을 처리하기 위한 주요 라이브러리는 datetime
날짜, 시간, 시간대와 관련된 다양한 클래스와 함수를 제공, 날짜와 시간 연산에 유용함

관련 함수: 
   (1) datetime.date: 날짜(연, 월, 일)를 표현하는 클래스
          e.g.
          date1=datetime.date(2023,1,1)
          date2=datetime.date(2023,12,31)
          diff=date2-date1
          print(diff.days)
   (2) today(): 오늘의 날짜를 반환
          e.g.
          today=datetime.date.today()
          print(today) 
   (3) datetime.time: 시간(시, 분, 초, 마이크로초)을 표현하는 클래스
   (4) datetime.datetime: 날짜와 시간을 모두 포함하는 클래스
          e.g.
          d=datetime.datetime(2023,11,2,14,29,45)
          print(d)

   (5) now(): 현재의 날짜와 시간을 반환
          e.g.
          now=datetime.datetime.now()
          print(now) 
   (6) datetime.timedelta: 두 날짜/시간 간의 차이를 표현하는 클래스
   (7) datetime.tzinfo: 시간대 정보를 위한 기본 클래스
   (8) datetime.fromtimestamp : 
       *** time.time()으로 받은 인간이 읽기 어려운 형태의 시간을 dateimte 형태로 변환해줌
          e.g.
          from datetime import datetime
          t=time.time()
          d=datetime.fromtimestamp(t) # timestamp으로부터 타임스탬 형식의 데이터를 넣어주면, datetime 형태로 반환해주겠다
          print(d,type(d))
          ==> 결과 : 2024-05-08 06:24:28.706908 <class 'datetime.datetime'>

datetime 모듈의 날짜와 시간 객체들을 문자열 형식으로 혹은 그 반대로 포맷 가능
   strftime() (String Format Time)
      - 날짜와 시간 객체를 문자열로 변환하는 데 사용
      - 사용자가 지정한 형식 문자열을 기반으로 날짜와 시간 정보를 문자열로 표현
         e.g.
         import datetime
         now=datetime.datetime.now()
         print(now,type(now))
         formatted=now.strftime("%Y-%m-%d %H:%M:%S")
         print(formatted,type(formatted)) 

   strptime() (String Parse Time)
      - 문자열을 날짜와 시간 객체로 변환하는 데 사용
      - 주어진 형식 문자열을 기반으로 문자열에서 날짜와 시간 정보를 파싱
         e.g.
         import datetime
         date_string="2023-11-02 14:45:30"
         print(date_string, type(date_string))
         dt=datetime.datetime.strptime(date_string, "%Y-%m-%d %H:%M:%S")
         print(dt,type(dt))

관련 포맷 코드 표<BR>:
   포맷코드   설명   예<BR>
   %a   요일 줄임말   Sun, Mon, ... Sat<BR>
   %A   요일   Sunday, Monday, ..., Saturday<BR>
   %w   요일을 숫자로 표시, 월요일일요일, 06   0, 1, ..., 6<BR>
   %d   일   01, 02, ..., 31<BR>
   %b   월 줄임말   Jan, Feb, ..., Dec<BR>
   %B   월   January, February, …, December<BR>
   %m   숫자 월   01, 02, ..., 12<BR>
   %y   두 자릿수 연도   01, 02, ..., 99<BR>
   %Y   네 자릿수 연도   0001, 0002, ..., 2017, 2018, 9999<BR>
   %H   시간(24시간)   00, 01, ..., 23<BR>
   %I   시간(12시간)   01, 02, ..., 12<BR>
   %p   AM, PM   AM, PM<BR>
   %M   분   00, 01, ..., 59<BR>
   %S   초   00, 01, ..., 59<BR>
   %Z   시간대   대한민국 표준시<BR>
   %j   1월 1일부터 현재까지의 일수 (1/1 포함 경과일)   001, 002, ..., 366<BR>
   %U   1년중 주차, 월요일이 한 주의 시작으로   00, 01, ..., 53<BR>
   %W   1년중 주차, 월요일이 한 주의 시작으로   00, 01, ..., 53<BR>
   %c   날짜, 요일, 시간을 출력, 현재 시간대 기준   Sat May 19 11:14:27 2018<BR>
   %x   날짜를 출력, 현재 시간대 기준   05/19/18<BR>
   %X   시간을 출력, 현재 시간대 기준   '11:44:22'


============================================

<< time 모듈 >>

관련 함수:
   (1) localtime() : 구조화된 시간 튜플 형태로 반환   
      ** 호출할 인자가 없다면 (함수 괄호 안이 비어있다면) 현재 시간을,
         () 안에 인자가 있다면 이를 유닉스 시간 기준으로 
         우리가 인지할 수 있는 형태의 '구조화된' 시간으로 변환하여 값을 반환

      e.g.
      import time
      local_time=time.localtime()
      print(local_time)
      ==> 결과 : time.struct_time(tm_year=2024, tm_mon=5, tm_mday=8, tm_hour=5, tm_min=44, tm_sec=35, tm_wday=2, tm_yday=129, tm_isdst=0)

      e.g.
      import time
      t=time.localtime(1609160537.371015)
      print(t)
      local_time=time.strftime('%a %b %d %H:%M%S %y',t)
      print(local_time)
      ==> 결과 : time.struct_time(tm_year=2020, tm_mon=12, tm_mday=28, tm_hour=13, tm_min=2, tm_sec=17, tm_wday=0, tm_yday=363, tm_isdst=0)
                 Mon Dec 28 13:0217 20

   (2) time.time() : 현재 시간을 1970년 1월 1일 0시 0분 0초 (유닉스 시간의 시작)부터 현재까지의 초(second)로 표현한 값을 반환
      e.g.
      import time
      time.time()
      ==> 결과 : 715147269.5194867

   (3) time.asctime(): time.localtime에서 반환한 튜플 형태의 값을 인수로 받아 날짜와 시간을 알아보기 쉬운 형태로 리턴
      e.g.
      import time
      current_time=time.localtime(1609160537.371015)
      print(current_time)
      # struct_time 객체를 인간이 읽을 수 있는 형태로 변환
      readable_time=time.asctime(current_time) 
      print(readable_time)
      ==> 결과 : time.struct_time(tm_year=2020, tm_mon=12, tm_mday=28, tm_hour=13, tm_min=2, tm_sec=17, tm_wday=0, tm_yday=363, tm_isdst=0)
                 Mon Dec 28 13:02:17 2020


============================================

<< random 모듈 >>
난수 생성을 위한 다양한 함수가 있음
아래처럼 random을  import한 후 사용 가능
  import random
random에서 특정 함수만 불러와 사용하는 것도 가능:
  from random import 사용할 함수명
    e.g. from random import shuffle

- 기본 난수 생성: 
random.random()
    ==> 0과 1 사이의 무작위 부동소수점 숫자를 반환

- 범위 지정 난수 생성: 
random.randint(시작점,끝점)
    ==> 시작점과 끝점 사이의 무작위 정수를 반환(끝점 포함)
random.randrange(시작점, 끝점, [스텝])
    ==> 지정된 범위에서 무작위 정수를 반환. step을 설정하여 수의 간격을 조정할 수 있음

- 시퀀스용 함수:
random.choice(sequence)
    ==> 주어진 시퀀스(리스트, 튜플 등)에서 무작위로 아이템을 선택하여 반환.
random.shuffle(x[, random])
    ==> 리스트의 항목들을 무작위로 섞는다. 
    ===> random은 섞기를 위한 함수를 커스텀할 때 사용.
random.sample(population, k)
    ==> 주어진 시퀀스에서 무작위로 k개의 항목을 뽑아 새 리스트로 반환.

- 분포 기반 난수 생성:
random.uniform(a, b)
    ==> a와 b 사이의 무작위 부동소수점 숫자를 균등 분포로 반환.
random.gauss(mu, sigma)
    ==> 평균 mu와 표준편차 sigma를 가지는 정규 분포에서 난수를 반환.

============================================

파일 생성 및 작업물 작성
   with open('파일명','수행할 작업') as 변수명:
      f.write('작성하고 싶은 내용 작성')

파일 내용 불러오기
   with open('파일명','수행할 작업') as 변수명:
      f.write('작성하고 싶은 내용 작성')




============================================

<< pickle 모듈 >>

파이썬 객체를 파일로 저장하고 불러올 때 쓰는 모듈
   import pickle




============================================

<< os 모듈 >>

os.getcwd() : 현재 작업중인 폴더 위치 확인
os.chdir('변경할 위치') : 폴더 변경
os.rename('원래 이름', '변경할 이름') : 폴더명 변경


============================================
<< 리눅스 명령어 >>

!pwd
!mkdir
!ls -la
!touch 폴더명.txt

============================================

<< glob 모듈 >>

glob.glob('~~')

============================================



============================================




