<< 사용자 함수 >>

파이썬에서 특정 기능을 수행해 주는 것이 함수.
함수에도 크게 5가지 종류가 있음:
1. 내장 함수 (built-in functions)
2. 외장 함수 (external functions)
3. 외부 라이브러리/패키지 
4. 사용자 함수 (user-defined functions)
5. 람다 함수 (lambda functions)

============================================

<< 내장 함수 >>

파이썬에서 기본적으로 제공하는 함수.
별도의 모듈을 import하지 않고도 사용 가능
자주 사용하는 내장 함수로는 print(), input(), int() 등이 있음

============================================

<< 외장 함수 >>

표준 라이브러리에 포함ehls 모듈과 함수를 가리키는 것으로 모듈을 import하여 사용
파이썬 표준 라이브러리의 os, sys, math, random, datetime 등의 모듈에는 다양한 외장 함수가 포함
==> 표준 라이브러리는 별도 설치 불필요
    *** 표준 라이브러리 공식 페이지: https://docs.python.org/ko/3.10/library/index.html
==> 사용 필요 시 아래처럼 import + 함수명 써야 함
  e.g.
  import random

============================================

<< 외부 라이브러리/패키지 >>

사용하려면 해당 라이브러리/패키지 설치 필요
설치 후 외장 함수와 마찬가지로 필요한 모듈을 import하여 사용
자주 사용하는 라이브러리/패키지:
  numpy : 딥러닝에서 많이 사용
  pandas : 데이터 전처리 때 많이 사용
  requests : 데이터 수집/전처리에서 많이 사용

설치 및 사용 방법:
  !pip install pandas # 판다스 라이브러리 설치 
  import pandas as pd # import 후 사용 가능 
  실행할 내용 입력 

============================================

<< 사용자 함수 >>

사용자가 직접 생성하여 사용하는 함수 
4가지 형태가 있음
- 입력값, 출력값 모두 존재하는 경우
- 입력값만 존재하는 경우
- 출력값만 존재하는 경우
- 입출값, 출력값 모두 없는 경우
  *** 함수에서 출력값은 return으로 지정해줘야 함. print 사용 시 None이 반환됨 

기본 포맷은 아래와 같음:
    def 함수명 (매개변수1, ..., 매개변수n):
        수행할 기능 작성
            return 결과값 

    e.g. def compare_num(threshold)
            for number in numbers:
              if threshold<number:
                return True
            return False
          ==> threshold 의 숫자가 numbers에 있는 숫자보다 작다면 True를 반환,
              그렇지 않다면 False를 반환
          *** 사용자 함수는 return을 한번만 하기 때문에 
              else: 
                return False를 넣게 되면 
              처음에 반복문이 돌 때의 숫자가 false라면 false를 반환하고 끝남. 
              따라서 의도와 다른 값이 나오게 됨

============================================

<< lambda 함수 >>

이름 없는 간단한 함수를 정의할 때 사용하는 익명의 함수
lambda 키워드를 사용하여 한 줄로 함수를 정의
주로 간단한 연산이 필요할 때 사용
재활용 가능

기본 형태:
  변수명=사용할 함수(lambda 임의변수명:실행할 내용, 참조할 자료)

  e.g. 
    multiply=lambda x,y: x*y # : 뒤에 붙은게 기능, 그 앞에 붙은게 변수
    print(multiply(3,4)) # 출력: 12
  e.g. 
    numbers=[1,2,3,4,5]
    squared_numbers=map(lambda x:x*x, numbers)
    print(list(squared_numbers))
      ==> 결과 : [1, 4, 9, 16, 25]
  e.g. 
    filtered_number=filter(lambda x:x%2==0,numbers)
    print(list(filtered_number))
      ==> 결과 : [2, 4]

  e.g.
    words = ["hello", "world", "python", "map"]
    words_upper=map(lambda x:x.upper(), words)
    print(list(words_upper))
      ==> 결과 : ['HELLO', 'WORLD', 'PYTHON', 'MAP']

============================================
============================================

<< zip 함수 >>

여러 개의 이터러블(리스트, 튜플 등)을 인자로 받아, 동일한 인덱스에 있는 요소들을 하나의 튜플로 묶어서 이터레이터를 반환
데이터를 병렬로 처리할 때 유용
일반적인 형식: 
  변수명2=zip(이터러블1, 이터러블2)

  e.g.
  list1=[1,2,3,4]
  list2=['a','b','c','d']
  zipped=zip(list1,list2) # list1과 list2의 동일 인덱스들을 하나로 튜플로 묶어줌
  print(list(zipped))

  e.g.
  # Q. 두 개의 리스트(이름과 성)를 사용하여 각 사람의 전체 이름을 생성하세요.
  first_names=['John','Jane','Corey','Travis']
  last_names=['Doe','Smith','Turner','williams']
  
  full_names=[first+" "+last for first,last in zip(first_names, last_names)]
  print(full_names)


============================================

<< 파이썬의 random 모듈 >>
난수 생성을 위한 다양한 함수가 있음
아래처럼 random을  import한 후 사용 가능
  import random
random에서 특정 함수만 불러와 사용하는 것도 가능:
  from random import 사용할 함수명
    e.g. from random import shuffle

- 기본 난수 생성: 
random.random()
    ==> 0과 1 사이의 무작위 부동소수점 숫자를 반환

- 범위 지정 난수 생성: 
random.randint(시작점,끝점)
    ==> 시작점과 끝점 사이의 무작위 정수를 반환(끝점 포함)
random.randrange(시작점, 끝점, [스텝])
    ==> 지정된 범위에서 무작위 정수를 반환. step을 설정하여 수의 간격을 조정할 수 있음

- 시퀀스용 함수:
random.choice(sequence)
    ==> 주어진 시퀀스(리스트, 튜플 등)에서 무작위로 아이템을 선택하여 반환.
random.shuffle(x[, random])
    ==> 리스트의 항목들을 무작위로 섞는다. 
    ===> random은 섞기를 위한 함수를 커스텀할 때 사용.
random.sample(population, k)
    ==> 주어진 시퀀스에서 무작위로 k개의 항목을 뽑아 새 리스트로 반환.

- 분포 기반 난수 생성:
random.uniform(a, b)
    ==> a와 b 사이의 무작위 부동소수점 숫자를 균등 분포로 반환.
random.gauss(mu, sigma)
    ==> 평균 mu와 표준편차 sigma를 가지는 정규 분포에서 난수를 반환.

============================================

.join( ) 함수
문자열을 붙여주는 함수
- 공백 없이 문자들 붙이기 :
      변수명=''.join(글자 붙일 변수명) # for문에서 각 문자별로 받을 때 사용

