<< NumPy >>
- Numerical Python의 약자
- 대규모 다차원 배열과 행렬 연산에 필요한 다양한 함수를 제공
- 선형대수 기반의 프로그램을 쉽게 만들 수 있도록 지원하는 대표적인 패키지
- 많은 머신러닝 알고리즘이 넘파이 기반으로 작성돼 있으며 알고리즘의 입출력 데이터를 넘파이 배열 타입으로 사용함
- 넘파이의 기본 데이터 타입은 ndarray. ndarray를 이용해 넘파이에서 다차원 배열을 쉽게 생성하고 다양한 연산 수행

<< 넘파이 배열 >>
- 모든 요소가 동일한 데이터 타입을 가져야 함 
  ==> 메모리 사용과 계산 속도를 최적화에 도움이 됨
- 모든 요소가 연속된 메모리 블록에 저장. 
  ==> 데이터 접근과 조작을 더 빠르고 효율적으로 만듦
- 수학적이고 과학적인 계산에 최적화되어 있으며, 특히 대량의 데이터를 다룰 때 높은 성능을 제공
- 고정된 크기를 가진다. 배열의 크기를 변경하려면 새로운 배열을 생성하고 기존 데이터를 복사해야함
- 다차원 배열을 지원하며, 선형대수, 통계, 푸리에 변환 등 고급 수학적 및 과학적 연산을 위한 광범위한 함수와 메서드를 제공.

============================================================

<< 배열 정보 확인 >>

- 배열 사이즈
  배열명.shape
    e.g. array_1d.shape

- 배열 요소 수
  배열명.size
    e.g. array_1d.size

- 해당 배열이 메모리에서 차지하는 바이트 수 
  배열명.itemsize
    e.g. z.itemsize

- 차원 확인:
  배열명.ndim
    e.g. data.ndim
    ==> 결과값으로 해당 배열의 차원을 숫자를 반환해줌 


============================================================

<< 배열 생성 >>

- 1차원 배열: 
  변수명=np.array([데이터 인풋])
    e.g. array=np.array([1,2,3,4,])

- 2차원 배열: 
  변수명=np.array([데이터 인풋],[데이터 인풋])
    e.g. array_2d=np.array([[1,2,3],[4,5,6]])

- 배열 생성:
  변수명=np.arange(요소 수).reshape(행 수, 열 수)
  e.g. a=np.arange(10).reshape(2,5)

  변수명=np.arange(요소 수),reshape(행 수, -1)
  ==> 주어진 요소를 가지고 주어진 행의 수만큼 만들고 열 수는 이에 맞춰 알아서 배열 생성


- 배열 요소 전체 0으로 생성: 
  1차원 : 
    np.zeros(요소수)
  2차원 : 
    np.zeros((행 수, 열 수))

- 배열 요소 전체 1으로 생성: 
  1차원 : 
    np.ones(요소수)
  2차원 : 
    np.ones((행 수, 열 수))

- 배열 요소 전체 특정 배열과 같은 형식으로 생성:
  np.zeros_like(참조 배열)
    e.g. z=np.zeros_like(a)

  np.oness_like(참조 배열)
    e.g. o=np.ones_like(a)

  np.full_like(참조 배열, 특정 값)
    e.g. f=np.full_like(a,5)

- 특정 요소로 배열 생성, 배열의 shape에 행 수만 지정 :
  np.arange(요소 수).reshape(행 수, -1)
    e.g. ar=np.arange(30).reshape(2,-1)


- 배열에 데이터 추가:
  np.append(변수명, [추가할 값1, ..., 추가할 값n])
  e.g. np.append(data,[500, 600])
  e.g. np.append(data, 500)


============================================================

<< 배열 변경 >>

----- [ reshape ] -----
** " -1 " 은 다른 조건들이 수행된 후 알아서 처리하라는 뜻.

  신규배열=기존배열명.reshape(행 수, 열 수)
    e.g. ar21=ar.reshape(2,3)
  
  신규배열=기존배열명.reshape(-1,) # 기존에서 1행 줄이기
    e.g. ar21=ar.reshape(-1,)
  
  신규배열=기존배열명.reshape(-1,행 수, 열 수) # 기존에서 행 수, 열 수에 맞춰 배열 정리, 차원수는 알아서
    e.g. r23=ar.reshape(-1,2,5)


----- [ resize ] -----

np.resize(기존배열(행 수, 열 수))
e.g. resized=np.resize(a,(3,2))
     ==> 기존 a 배열을 3행 2열로 바꿔서 resized 라는 이름으로 담기



----- [ split ] -----

- 배열을 여러 하위 배열로 나눔 (기존 1개의 배열을 여러 개의 배열로 쪼개기) :
  배열명1, 배열명2=np.split(기존배열, 나눌 배열 수)
    e.g. split1, split2=np.split(array,2)


----- [ Concatenate ] -----

- 배열 합치기 (세로 - 행 쌓기) :
  np.concatenate((배열1,배열2,...),  axis=0)
  e.g. concatenated=np.concatenate((a,b),axis=0) # 행 방향 (아래)로 배열 a,b 합치기

- 배열 합치기 (가로 - 열 쌓기) :
  np.concatenate((배열1,배열2,...),  axis=1)
  e.g. concatenated=np.concatenate((a,b),axis=1) # 열 방향 (우측)로 배열 a,b 합치기

----- [ Stack ] -----

- 배열 합치기 (세로) :
  np.vstack((배열1, 배열2,...))
    e.g. stacked=np.vstack((a,b,a,b)) # 행 배열 쌓기 (세로로). 배열 a,b,a,b 를 수직 방향으로 쌓기


============================================================

<< 배열을 리스트로 만들기 >>
  배열명.tolist()
  e.g. li=array3d.tolist()


============================================================

<< 배열 인덱싱 >>

- 기본 형식:
  배열명[행][열]

- zero가 아닌 인덱스를 배열 형태로 출력:
  (A) np.where(배열명!=0)
      e.g. print(np.where(arr4!=0))

  (B) np.nonzero(배열명)
      e.g. print(np.nonzero(arr4))


<< 배열 슬라이싱 >>

  배열명[ : 숫자, 숫자 : ]
  ==> 행= ~ 숫자 행 직전까지,
      열= 숫자부터 시작해서 끝까지에 해당되는 
      e.g. array2d[:2,1:]
      e.g. array2d[:2,0]
        ==> 끝에 0만 저렇게 붙일 경우 형태가 특이하게 바뀜. 왜 그런지 이유 찾아봐야함



<< 블린 인덱싱 >>

- 조건에 해당되는 요소만 추출 :
  배열명1=배열명2(배열명2에서 요소의 추출할 조건)
  e.g. array3=array1d[array1d>5]
       ==> array1d에서 5 이상에 해당되는 요소들만 추출하여 배열 형태로 반환

- 배열명+조건 :
  e.g. print(array1d>5)
       ==> array1d의 각 요소를 array1d>5 조건에 대한 True, False로 결과 변환


<< 배열 정렬 >>

내림차순 정렬:
  (A) 
  np.sort(배열명)[::-1]
  arr3_1=np.sort(arr3)[::-1]

  (B) 
  배열명[::-1]
  e.g. arr[::-1]


# 행렬이 2차원 이상일 경우 axis 축 값 설정을 통해 로우 방향, 칼럼 방향으로 정렬 수행
array2d=np.array([[8,12],[7,1]])
print(array2d,'\n')

sort_array2d_axis0=np.sort(array2d,axis=0) # 행방향 올림차순 (세로로 재정렬)
print(sort_array2d_axis0,'\n')

sort_array2d_axis1=np.sort(array2d,axis=1) # 열방향 올림차순 (가로로 재정렬)
print(sort_array2d_axis1,'\n')


- .sort(0)


- .sort(1)


- argsort


- 배열 내의 모든 고유한 원소를 찾아 정렬된 형태로 반환 :
  np.unique(배열명)
  e.g. x=[1,2,2,3,4,4,4]
       unique_x=np.unique(x) 
       unique_x
       ==> 결과 값: [1, 2, 3, 4]
  ** set를 사용했을 같음
  e.g. names=np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
       set(names)
       ==> 결과 : {'Bob', 'Joe', 'Will'}


- 두 배열을 합쳐 모든 고유한 원소를 정렬하여 반환 : 
  np.union1d(배열1, 배열2)
e.g. x=[1,2,3]
     y=[2,3,4,5]
     union=np.union1d(x,y)
     union
     ==> 결과 : [1, 2, 3, 4, 5]


- 배열 x의 각 원소가 배열 y에 존재하는지 여부를 불리언 배열로 반환 :
  np.in1d(배열1, 배열2)
  e.g. x=[1,2,3,4]
       y=[2,4,6]
       result=np.in1d(x,y)
       result
       ==> 결과 : [False,  True, False,  True]


<< 배열끼리의 비교 >>

- 배열 arr1과 arr2에서, arr2의 요소가 10보다 큰 위치의 arr1 요소들을 선택 :
e.g. arr1 = np.array([10, 20, 30, 40, 50])
     arr2 = np.array([5, 15, 25, 10, 35])
     print([arr2>10])
    
     result=arr1[arr2>10]
     result



<< 배열 전치 >>
transpose, swapaxes 사용 가능
- transpose 는 다차원 배열에서 축의 순서를 재배열하여 배열의 모양을 변경
- swapaxes는 두 축만을 대상으로 서로 위치를 교환

- 행과 열을 바꿔줌 
  배열명.T
  e.g. arr.T

- 축 순서 재배열 
  np.transpose(배열명,(축 순서)) # 순서는 가장 높은 차원부터 차례대로임 (e.g. (3차원,2차원,1차원))
  e.g. np.transpose(arr, (1, 0, 2))

- 축 교환 
  np.swapaxes(배열명,축 넘버, 축 넘버) 
    ==> 0번 축 : 행, 1번 축: 열
    e.g. y=np.swapaxes(a,0,1)



============================================================

<< 팬시 인덱싱 >>
정수 배열을 사용한 인덱싱:
- 정수로 이루어진 배열을 사용하여 다른 배열의 특정 요소를 선택
  e.g. arr=np.array([10,20,30,40,50])
       index_arr=np.array([0,2,4]) # 추출할 인덱스의 리스트 
       result=arr[index_arr]
       print(result)



부울 마스크를 사용한 인덱싱:
- 부울 배열(마스크)을 생성하여, 마스크가 True인 위치의 요소를 선택
  e.g. arr=np.array([10,20,30,40,50])
       mask=arr>25
       result=arr[mask]
       print(result)



정수 배열과 부울 마스크의 결합:
- 이 방법들을 결합하여 더욱 강력한 선택과 수정을 할 수 있다.
  e.g. arr=np.array([10,20,30,40,50])
       index_arr=np.array([0,2,4])
       mask=arr[index_arr]>20
       result=arr[index_arr][mask] 
       print(result)
       ==> index_arr 에 만족하는 것 중에서 mask에 만족하는 요소를 추출
       
각 배열의 행에 특정 값 지정: 
- for문으로 각 회차만큼 행 값 지정하는 방법
  arr=np.empty((8,4)) # empty : 형태 잡기 위해 아무거나 막 들어감
  for i in range(8): # 각 행별로 i가 들어가게 됨
      arr[i]=i # arr[i] : 배열의 행에 i 값을 넣으라는 말 
  print(arr)

- 특정 인덱스로 요소 추출
  배열명[[추출할 인덱스 리스팅]]
  e.g. arr=np.empty((8,4)) 
       print(arr[[4,3,0,6]])
       ==> 4행 4열로 나옴

- 특정 인덱스로 요소 추출 & 열 순서 바꿔서 결과 반환
    배열명[[추출할 인덱스 리스팅]][:,[열 인덱스]]
    e.g. print(arr[[1,5,7,2]][:,[0,3,1,2]])
         ==> original array:
              [[ 4  5  6  7]
               [20 21 22 23]
               [28 29 30 31]
               [ 8  9 10 11]] 
        ==> 결과 array:
              [[ 4  7  5  6]
               [20 23 21 22]
               [28 31 29 30]
               [ 8 11  9 10]]

============================================================

<< 기본 연산 - 1차원 >>

- 더하기 :
  배열명+더할 숫자
    e.g. array+2

- 제곱 :
  배열명**2
    e.g. array**2


<< 기본 연산 - 2차원 >>

- 더하기:
  배열1 + 배열2
  e.g. a=np.array([1,2,3])
       b=np.array([4,5,6])
       a+b

- 곱하기:
  배열1 * 배열2
  e.g. a=np.array([1,2,3])
       b=np.array([4,5,6])
       a*b

============================================================

<< 기본 통계 연산 >>

- 평균 :
  np.mean(배열명)
    e.g. np.mean(array)

- 중간값 :
  np.median(배열명)
    e.g. np.median(data)

- std :
  np.std(배열명)
    e.g. np.std(data)


- 스퀘어 루트 : 
  np.sqrt(배열명)
  e.g. np.sqrt(array)



<< 수학적 함수 >>

- 사인 함수
  np.sin(변수명)

- 코사인 함수
  np.cos(변수명)

- exponential
  np.exp(변수명) # 배열로 바로 집어 넣을 수도 있은 듯
    e.g. np.exp([1,2,3])

- 나머지를 구할 때 :
  (A) np.mod(배열1, 배열2)
      e.g. print(np.mod(value,value1))

  (B) np.remainder(배열1,배열2)
      e.g. print(np.remainder(value,value1))

- 역 수 (reciprocal)
  np.reciprocal(값)
  e.g. value=np.array([0.85,1.85,1,100])
       print(np.reciprocal(value))
       ==> 결과 값: [1.17647059 0.54054054 1.         0.01      ]

- 승수 (power)
  np.power(값,값)
  e.g. value=np.array([2,10,15])
       value1=np.array([1,2,3])
       print(np.power(value,2),'\n')
       print(np.power(value, value1))
       ==> 결과 값: [  4 100 225] 

                    [   2  100 3375]

- 배열 내 요소 중 최대값의 인덱스 찾아 반환 :
  np.argmax(배열명)
  e.g. print(np.argmax(a)) # 최대값의 인덱스를 반환

- 배열 내 요소 중 최소값의 인덱스 찾아 반환 :
  np.argmin(배열명)
  e.g. print(np.argmin(a))


============================================================

- any 메서드 : 하나 이상의 값이 True 인지 검사
  배열명.any()
  e.g. bools=np.array([False,False, True, True])
       bools.any()
       ==> 결과 값: True


- all 메서드 : 모든 원소가 True인지 검사
  배열명.all()
  e.g. bools=np.array([False,False, True, True])
       bools.all()
       ==> 결과 값: False


- 조건에 대한 만족, 불만족 시 요소 결과 변경 방법 :
  np.where(조건, 조건 만족 시 결과, 조건 불만족 시 결과)
  e.g. arr=np.random.randn(4,4)
       np.where(arr>0,1,-1) 
       ==> arr 배열: 
            [[ 1.49407907 -0.20515826  0.3130677  -0.85409574]
             [-2.55298982  0.6536186   0.8644362  -0.74216502]
             [ 2.26975462 -1.45436567  0.04575852 -0.18718385]
             [ 1.53277921  1.46935877  0.15494743  0.37816252]] 

       ==> 결과 값: 
            [[-1 -1 -1  1]
             [ 1  1 -1 -1]
             [-1 -1 -1  1]
             [-1 -1 -1  1]]

    ** 만족/ 불만족 둘 중 하나에 대해서만 결과 값 바꿀 경우:
       해당 칸에 배열 값 그대로 넣어주면 됨
       e.g print(np.where(arr>0,2,arr))
           ==> 요소가 양수일 경우 2로, 음수일 경우 현재 상태 그대로 출력


============================================================

<< 배열 패턴 만들기 >>

----- [ np.pad() ] -----

np.pad(배열명, pad_width=추가할 레이어 숫자, mode='레이어 추가 방식', constant_values=상수)
==> constant_values 는 'constant' 모드일 때만 어떤 상수로 추가할 것인지 설정 필요

mode 종류:
1. constant: 주위에 상수 값으로 패딩을 추가.
e.g. np.pad(array, pad_width, mode='constant', constant_values=0)

2. edge: 배열의 가장자리 값을 복사하여 패딩을 추가.
e.g. np.pad(array, pad_width, mode='edge')

3. linear_ramp: 선형 램프를 사용하여 패딩을 추가. 패딩 값은 선형적으로 증가하거나 감소.
e.g. np.pad(array, pad_width, mode='linear_ramp', end_values=0)

4. maximum: 배열의 가장자리 값과 비교하여 최대 값을 패딩에 사용.
e.g. np.pad(array, pad_width, mode='maximum')

5. mean: 배열의 가장자리 값의 평균을 패딩에 사용.
e.g. np.pad(array, pad_width, mode='mean')

6. median: 배열의 가장자리 값의 중앙값을 패딩에 사용.
e.g. np.pad(array, pad_width, mode='median')

7. minimum: 배열의 가장자리 값과 비교하여 최소 값을 패딩에 사용.
e.g. np.pad(array, pad_width, mode='minimum')

8. reflect: 배열의 값을 반사하여 패딩을 추가. 경계값은 제외.
e.g. np.pad(array, pad_width, mode='reflect')

9. symmetric: 배열의 값을 반사하여 패딩을 추가. 경계값은 포함.
e.g. np.pad(array, pad_width, mode='symmetric')

10. wrap: 배열의 값을 래핑하여 패딩을 추가.
e.g. np.pad(array, pad_width, mode='wrap')


----- [ np.diag() ] -----





============================================================

<< view (뷰) >>

- 원본 배열의 데이터에 대한 새로운 참조
- 뷰를 사용하면 원본 데이터를 복사하지 않고도 배열의 일부에 접근하거나 수정 가능
- 뷰를 생성하는 방법은 2가지:
  (A) 슬라이싱 
  (B) .view() 사용

----- [ 슬라이싱 ] -----

1. 원본 배열 필요
2. 뷰배열=원본배열[인덱스] # 뷰로 만들 부분 지정
3. 뷰배열[수정 조건]=수정 값

e.g. original_array = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) # <== 원본
     array_view2=original_array[0] # <== 3차원 배열에서 1번째 2차원 배열을 슬라이싱으로 뷰 생성
     array_view2[array_view2%2==0]=0 # <==  뷰에서 조건에 맞춰 수정 




----- [ .view() ] -----

기본 사용법: 

1. 원본 배열 필요
2. 뷰배열=원본배열.view()
3. 뷰배열[인덱스]=수정 값

e.g. original_array = np.array([[1, 2, 3], [4, 5, 6]]) # <== 원본 배열
     array_view=original_array.view() # <== 뷰 배열 생성
     array_view[0]=0 # <== 뷰 배열에서 값 수정 

** 뷰 생성 후 np.where 로 값 수정 시 원본에 반영 안됨!
   ==> np.where는 새로운 배열을 생성하게 되어 원본에 수정 사항이 적용 안됨 




============================================================

<< 데이터 타입 변경 >>
- 데이터타입에서 비트 변경/확인은 중요함. 지정된 비트가 메모리 사용량임. 그 범위를 벗어날 수 없음

- float형 64비트로 변경:
  변수명.astype(np.float64)

- 정수형 32비트로 변경:
  변수명.astype(np.int32)

- 다른 배열의 데이터 타입과 동일하게 변경:
  변수1=변수1.astpye(변수2.dtype)
  e.g. int_array=int_array.astype(calibers.dtype)


- 문자열 타입으로 배열 만들기 (S: 바이트 문자열)
  (1) dtype='S' 사용:
  np.array([배열 속성],dtype='S')
    e.g. arr=np.array([1,2,3,4],dtype='S') 
         ==> 결과값: [b'1' b'2' b'3' b'4']

  (2) dtype=np.string_ 사용 : 
  np.array([배열 속성],dtype=np.string_)
    e.g. numeric_string=np.array(['1.25','-9.5','42'], dtype=np.string_) 
         ==> 결과값: [b'1.25' b'-9.5' b'42']
    ** dtype=np.string_ 는 배열의 데이터 타입이 바이트 문자열임을 명시. dtype='S'와 동일



============================================================

<< NumPy Random >>
- seed를 통한 난수 생성 - 랜덤 고정됨
  np.random.seed 

- 균일분포의 정수 난수 1개 생성
  np.random.randint

- 0부터 1사이의 균일분포에서 난수 매트릭스 array 생성
  np.random.rand 

- 가우시안 표준 정규 분포에서 난수 매트릭스 array 생성
  np.random.randn 

- 기존의 데이터의 순서 바꾸기
  np.random.shuffle

- 기존의 데이터에서 sampling
  np.random.choice 
  

============================================================

<< 배열 데이터의 입출력 >>

- npy 파일로 저장
  np.save('파일명.npy',배열명) 
  e.g. arr=np.arange(10)
       np.save('some_array', arr)

- 하나의 배열이 저장된 npy 파일 부를 때
  np.load('파일명.npy') 
  e.g. np.load('some_array.npy')

- 다수의 배열이 저장된 파일 부를 때
  arch=np.load('array_archive.npz')
  print(arch['b']) # 로딩할 때는 개별로 불러와야 함 
  print(arch['a'])

- 여러개의 배열을 압축된 형식으로 저장 
  np.savez('파일명.npy',변수명1=배열명1, 변수명2=배열명2) 
  e.g. np.savez('array_archive.npz',a=arr,b=arr)




============================================================

<< 배열 실행 속도 계산 >>

e.g.  %time for _ in range(10): my_array2=my_arr*2
      ==> '_'은 값을 무시하고 싶은 경우 사용 (여기서는 인덱스 무시)
      ==> %time은 뒤따르는 한 줄의 코드 실행 시간을 측정하는 매직명령어







