<< NumPy >>
- Numerical Python의 약자
- 대규모 다차원 배열과 행렬 연산에 필요한 다양한 함수를 제공
- 선형대수 기반의 프로그램을 쉽게 만들 수 있도록 지원하는 대표적인 패키지
- 많은 머신러닝 알고리즘이 넘파이 기반으로 작성돼 있으며 알고리즘의 입출력 데이터를 넘파이 배열 타입으로 사용함
- 넘파이의 기본 데이터 타입은 ndarray. ndarray를 이용해 넘파이에서 다차원 배열을 쉽게 생성하고 다양한 연산 수행

<< 넘파이 배열 >>
- 모든 요소가 동일한 데이터 타입을 가져야 함 
  ==> 메모리 사용과 계산 속도를 최적화에 도움이 됨
- 모든 요소가 연속된 메모리 블록에 저장. 
  ==> 데이터 접근과 조작을 더 빠르고 효율적으로 만듦
- 수학적이고 과학적인 계산에 최적화되어 있으며, 특히 대량의 데이터를 다룰 때 높은 성능을 제공
- 고정된 크기를 가진다. 배열의 크기를 변경하려면 새로운 배열을 생성하고 기존 데이터를 복사해야함
- 다차원 배열을 지원하며, 선형대수, 통계, 푸리에 변환 등 고급 수학적 및 과학적 연산을 위한 광범위한 함수와 메서드를 제공.

============================================================

<< 배열 정보 확인 >>

- 배열 사이즈
  배열명.shape
    e.g. array_1d.shape

- 배열 요소 수
  배열명.size
    e.g. array_1d.size

- 해당 배열이 메모리에서 차지하는 바이트 수 
  배열명.itemsize
    e.g. z.itemsize

- 차원 확인:
  배열명.ndim
    e.g. data.ndim
    ==> 결과값으로 해당 배열의 차원을 숫자를 반환해줌 


============================================================

<< 배열 생성 >>

- 1차원 배열: 
  변수명=np.array([데이터 인풋])
    e.g. array=np.array([1,2,3,4,])

- 2차원 배열: 
  변수명=np.array([데이터 인풋],[데이터 인풋])
    e.g. array_2d=np.array([[1,2,3],[4,5,6]])

- 배열 생성:
  변수명=np.arange(요소 수).reshape(행 수, 열 수)
  e.g. a=np.arange(10).reshape(2,5)

  변수명=np.arange(요소 수),reshape(행 수, -1)
  ==> 주어진 요소를 가지고 주어진 행의 수만큼 만들고 열 수는 이에 맞춰 알아서 배열 생성


- 배열 요소 전체 0으로 생성: 
  1차원 : 
    np.zeros(요소수)
  2차원 : 
    np.zeros((행 수, 열 수))

- 배열 요소 전체 1으로 생성: 
  1차원 : 
    np.ones(요소수)
  2차원 : 
    np.ones((행 수, 열 수))

- 배열 요소 전체 특정 배열과 같은 형식으로 생성:
  np.zeros_like(참조 배열)
    e.g. z=np.zeros_like(a)

  np.oness_like(참조 배열)
    e.g. o=np.ones_like(a)

  np.full_like(참조 배열, 특정 값)
    e.g. f=np.full_like(a,5)

- 특정 요소로 배열 생성, 배열의 shape에 행 수만 지정 :
  np.arange(요소 수).reshape(행 수, -1)
    e.g. ar=np.arange(30).reshape(2,-1)



============================================================

<< 배열 변경 >>

----- [ reshape ] -----
** " -1 " 은 다른 조건들이 수행된 후 알아서 처리하라는 뜻.

  신규배열=기존배열명.reshape(행 수, 열 수)
    e.g. ar21=ar.reshape(2,3)
  
  신규배열=기존배열명.reshape(-1,) # 기존에서 1행 줄이기
    e.g. ar21=ar.reshape(-1,)
  
  신규배열=기존배열명.reshape(-1,행 수, 열 수) # 기존에서 행 수, 열 수에 맞춰 배열 정리, 차원수는 알아서
    e.g. r23=ar.reshape(-1,2,5)


----- [ resize ] -----

np.resize(기존배열(행 수, 열 수))
e.g. resized=np.resize(a,(3,2))
     ==> 기존 a 배열을 3행 2열로 바꿔서 resized 라는 이름으로 담기



----- [ split ] -----

- 배열을 여러 하위 배열로 나눔 (기존 1개의 배열을 여러 개의 배열로 쪼개기) :
  배열명1, 배열명2=np.split(기존배열, 나눌 배열 수)
    e.g. split1, split2=np.split(array,2)


----- [ Concatenate ] -----

- 배열 합치기 (세로 - 행 쌓기) :
  np.concatenate((배열1,배열2,...),  axis=0)
  e.g. concatenated=np.concatenate((a,b),axis=0) # 행 방향 (아래)로 배열 a,b 합치기

- 배열 합치기 (가로 - 열 쌓기) :
  np.concatenate((배열1,배열2,...),  axis=1)
  e.g. concatenated=np.concatenate((a,b),axis=1) # 열 방향 (우측)로 배열 a,b 합치기

----- [ Stack ] -----

- 배열 합치기 (세로) :
  np.vstack((배열1, 배열2,...))
    e.g. stacked=np.vstack((a,b,a,b)) # 행 배열 쌓기 (세로로). 배열 a,b,a,b 를 수직 방향으로 쌓기


============================================================

<< 배열을 리스트로 만들기 >>
  배열명.tolist()
  e.g. li=array3d.tolist()



============================================================

<< 기본 연산 - 1차원 >>

- 더하기 :
  배열명+더할 숫자
    e.g. array+2

- 제곱 :
  배열명**2
    e.g. array**2


<< 기본 연산 - 2차원 >>

- 더하기:
  배열1 + 배열2
  e.g. a=np.array([1,2,3])
       b=np.array([4,5,6])
       a+b

- 곱하기:
  배열1 * 배열2
  e.g. a=np.array([1,2,3])
       b=np.array([4,5,6])
       a*b

============================================================

<< 기본 통계 연산 >>

- 평균 :
  np.mean(배열명)
    e.g. np.mean(array)

- 중간값 :
  np.median(배열명)
    e.g. np.median(data)

- std :
  np.std(배열명)
    e.g. np.std(data)


- 스퀘어 루트 : 
  np.sqrt(배열명)
  e.g. np.sqrt(array)



<< 수학적 함수 >>

- 사인 함수
  np.sin(변수명)

- 코사인 함수
  np.cos(변수명)

- exponential
  np.exp(변수명) # 배열로 바로 집어 넣을 수도 있은 듯
    e.g. np.exp([1,2,3])




============================================================

<< 데이터 타입 변경 >>
- 데이터타입에서 비트 변경/확인은 중요함. 지정된 비트가 메모리 사용량임. 그 범위를 벗어날 수 없음

- float형 64비트로 변경:
  변수명.astype(np.float64)

- 정수형 32비트로 변경:
  변수명.astype(np.int32)

- 다른 배열의 데이터 타입과 동일하게 변경:
  변수1=변수1.astpye(변수2.dtype)
  e.g. int_array=int_array.astype(calibers.dtype)


- 문자열 타입으로 배열 만들기 (S: 바이트 문자열)
  (1) dtype='S' 사용:
  np.array([배열 속성],dtype='S')
    e.g. arr=np.array([1,2,3,4],dtype='S') 
         ==> 결과값: [b'1' b'2' b'3' b'4']

  (2) dtype=np.string_ 사용 : 
  np.array([배열 속성],dtype=np.string_)
    e.g. numeric_string=np.array(['1.25','-9.5','42'], dtype=np.string_) 
         ==> 결과값: [b'1.25' b'-9.5' b'42']
    ** dtype=np.string_ 는 배열의 데이터 타입이 바이트 문자열임을 명시. dtype='S'와 동일



============================================================

<< NumPy Random >>
- seed를 통한 난수 생성 - 랜덤 고정됨
  np.random.seed 

- 균일분포의 정수 난수 1개 생성
  np.random.randint

- 0부터 1사이의 균일분포에서 난수 매트릭스 array 생성
  np.random.rand 

- 가우시안 표준 정규 분포에서 난수 매트릭스 array 생성
  np.random.randn 

- 기존의 데이터의 순서 바꾸기
  np.random.shuffle

- 기존의 데이터에서 sampling
  np.random.choice 
  







============================================================

<< 배열 실행 속도 계산 >>

e.g.  %time for _ in range(10): my_array2=my_arr*2
      ==> '_'은 값을 무시하고 싶은 경우 사용 (여기서는 인덱스 무시)
      ==> %time은 뒤따르는 한 줄의 코드 실행 시간을 측정하는 매직명령어







