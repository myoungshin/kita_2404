
파이썬은 datetime,
판다스는 timestamp,
넘파이는 datetime64 

=====================================================================

<< 날짜 함수 타입 변환 >>

- 문자열 형식의 날짜를 datetime 형식으로 변환 :
  pd.to_datetime('날짜')
  e.g. pd.to_datetime('2020-01-01')

  pd.to_datetime(날짜변수명)  
  pd.to_datetime(date_str)

- 날짜 datetime 형식을 문자열 형식으로 변환 :
  date.strftime('%Y-%m-%d')
  e.g. date_only_list=[date.strftime('%Y-%m-%d') for date in date_objects]

- 날짜 데이터를 분기로 변환
  데이터프레임.dt.to_peirod('Q') # <== Q : quarter 
  e.g. quarter_data=date_series.dt.to_period('Q')


- 문자열을 period로 변환
  변수명.astype('period[M]') # <== M : month
  e.g. period_data=period_data.astype('period[M]')

- peirod를 timestamp로 변환
  변수명.apply(lambda x:x.to_timestamp())
  e.g. timestamp_data=period_data.apply(lambda x:x.to_timestamp())

=====================================================================

<< 특정 날짜 선택/추출 >>

- 일정한 간격으로 날짜 범위 생성 :
  pd.date_range(start='날짜', end='날짜')
  e.g. date_range=pd.date_range(start='2022-01-01', end='2022-01-10')
  ** pd.date_range 함수는 pandas에서 제공하지만 내부적으로 numpy의 날짜/시간 타입인 datetime64를 사용

- 특정 날짜의 데이터 선택 :
  데이터프레임.loc['날짜']
  e.g. df.loc['2022-01-02']

- 특정 날짜 범위 슬라이싱 :
  데이터프레임['시작 날짜':'끝 날짜']
  e.g. df['2022-01-01':'2022-01-02']

- 주어진 주기에 따라 데이터 리셈플링 :
  pd.date_range(start='날짜', periods=숫자, freq='빈도기준') 
  ** periods : 몇 개를 생성할건지
  ** freq : D (1일 단위), 2D (2일 단위)
  e.g. date_range=pd.date_range(start='2021-01-01', periods=10, freq='D')


=====================================================================

<< datetime 속성 추출하여 새로운 열에 추가 (e.g. 연도/월/일/요일) >>

- 참고할 데이터가 인덱스인 경우:
  데이터프레임['year']=데이터프레임.index.year
    e.g. df['열이름']=df.index.year
  데이터프레임['month']=데이터프레임.index.month
    e.g. df['month']=df.index.month
  데이터프레임['day']=데이터프레임.index.day
    e.g. df['day']=df.index.day
  데이터프레임['day_of_week']=데이터프레임.index.day_of_week
  ** day_of_week는 0-6으로 요일을 표현함. 0=월요일, 6=일요일
    e.g. df['day_of_week']=df.index.dayofweek

- 참고할 데이터가 기본 열에 있다면: 
  데이터프레임['연도 열이름']=데이터프레임['참고할 열이름'].dt.year
    e.g. df['year']=df['date'].dt.year
  데이터프레임['월 열이름']=데이터프레임['참고할 열이름'].dt.month
    e.g. df['month']=df['date'].dt.month
  데이터프레임['일 열이름']=데이터프레임['참고할 열이름'].dt.day
    e.g. df['day']=df['date'].dt.day
  데이터프레임['요일 열이름']=데이터프레임['참고할 열이름'].dt.dayofweek
    e.g. df['day_of_week']=df['date'].dt.dayofweek


=====================================================================

- 특정 구간 전/후의 내용들 잘라내기 
  데이터프레임.truncate(before="조건", after="조건")
  e.g. print(ts.truncate(before='2011-01-05',after='2011-01-10'))
  ==> 2011-01-05 이전과 2011-01-10 이후의 데이트는 잘라냄.


=====================================================================

<< 날짜 계산 >>

- datetime의 더하기, 빼기 수행
  timedelta(기간=기간) : datetime 객체의 더하기, 빼기를 수행
  e.g. now=datetime.now()
       in_two_weeks=now+timedelta(weeks=2)
       pd.date_range(datetime.now(), in_two_weeks)

- 특정 시점부터 특정 요일을 뽑을 때:
  pd.date_range('시작 날짜', periods=개수, freq='W-요일')
  e.g. dates=pd.date_range('11/30/2023',periods=10,freq='W-WED') 
  ==> 2023/11/30부터 수요일인 날짜들을 10개 뽑기

- 특정 날짜 범위 내에서 특정 시간 단위로 생성:
  pd.date_range('시작 날짜', '끝나는 날짜', freq='숫자h')
  e.g. pd.date_range('2000-01-01','2000-01-03 23:59', freq='4h')
  ==> 시작날짜에서 끝나는 날짜까지 4시간 단위로 


- 특정 기간으로 데이터프레임 생성:
  e.g. period_range=pd.period_range(start='2020Q1', end='2025Q4',freq='q')
       df=pd.DataFrame({
           'quarter':period_range,
           'start_date':period_range.start_time.date,
           'end_date':period_range.end_time.date
       })


=====================================================================

freq 매개변수에 사용되는 Frequncy strings
- A calendar year end frequency
- B   business day frequency
- C   custom business day frequency
- D   calendar day frequency
- W   weekly frequency
- M   month end frequency
- SM   semi-month end frequency (15th and end of month)
- BM   business month end frequency
- CBM   custom business month end frequency
- MS   month start frequency
- SMS   semi-month start frequency (1st and 15th)
- BMS   business month start frequency
- CBMS   custom business month start frequency
- Q   quarter end frequency



