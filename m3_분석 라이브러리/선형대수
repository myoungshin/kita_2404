<< 선형대수 >>
- 데이터 분석 및 머신 러닝에서 매우 중요한 역할을 수행. 
- 데이터를 벡터와 행렬로 표현하고, 이를 기반으로 다양한 알고리즘을 구현하며, 효율적인 계산을 수행하는 데 필수적.
- 선형대수의 기본 개념을 이해하면 데이터 분석과 머신 러닝의 많은 기법을 더 깊이 이해하고 활용 가능.

벡터 (Vector)
정의: 크기와 방향을 가지는 물리량. 보통 1차원 배열로 표현.
용도: 데이터 포인트를 표현하거나, 특성 벡터(feature vector)로 사용.
예시:  [x1,x2,…,xn]은n차원의벡터. 
** 벡터에서의 '차원'은 벡터를 이루고 있는 요소의 개수임 

행렬 (Matrix)
정의: 행과 열로 구성된 2차원 배열.
용도: 데이터 셋, 변환 행렬, 가중치 행렬 등으로 사용.
예시:  [acbd]  은 2x2 행렬입니다.

스칼라 (Scalar)
정의: 하나의 수치.
용도: 벡터나 행렬의 요소로 사용.
예시: 5, -3.2 등.

====================================================================

<< 벡터 (Vector) >>

[[ 행벡터 ]]
- 정의 -
행벡터는 "특징 벡터"라고도 불림
==> 특징 벡터는 여러개의 특성 (feature)들로 구성되어 있음. 
==> 이 벡터의 각 요소는 데이터의 특정 속성을 나타냄

- 용도 -
특징 벡터는 머신 러닝 모델의 입력으로 사용.
데이터를 수치적으로 표현하여 모델이 이해할 수 있도록 한다.
다양한 특성을 결합하여 데이터 포인트를 다차원 공간의 한 점으로 표현.


----- [ 벡터 계산 ] -----

- 같은 위치에 있는 요소들끼리 계산해줌
  e.g. person=np.array([30,175,70])
       another_person=np.array([25,160,55])
       difference=person-another_person
       print(difference)

- 스칼라 곱셈 :
  ==> scalar*vector가 되었을 때 벡터의 각 요소에 scalar를 곱해줌 
      e.g. scalar = 3
           row_vector=np.array([1,2,3])
           result=row_vector*scalar
           ==> 결과 : [3 6 9]

- 벡터와 행렬의 곱 :
  벡터에 행렬을 곱하면, 선형 변환을 하여 해당 벡터가 변환된 새로운 벡터를 얻을 수 있다
  예를 들어, 회전 행렬은 벡터를 회전시키는 역할을 한다.
  데이터셋을 처리할 때, 행렬을 사용하여 여러 데이터 포인트(벡터)를 동시에 변환하거나 조작할 수 있다.

  행렬A와 벡터v의 곱은 또 다른 벡터를 생성한다. 
  예를 들어, A가 m×n 행렬이고 v가 n (nx1)차원 열벡터일 때, Av는 m차원(mx1) 열벡터가 된다.
  ==> 즉, 행렬과 벡터 곱할 때 그 순서에 따라 결과물의 shape이 결정되는데,
      첫번째 위치한 것의 행, 뒤에 오는 것의 열 개수가 결과물의 행, 열 개수임

  기본 방법:
    np.dot(행렬1, 행렬2)

  e.g. A=np.array([ [1,2,3],
                    [4,5,6] ])
                
       v=np.array([ [1],
                    [0],
                    [-1] ])
       result=np.dot(A,v)
       print(result)
       ==> 결과 : [[-2]
                  [-2]]

       ==> 곱해지는 방식:
           A의 첫행에 있는 모든 요소가 v의 열에 있는 모든 요소와 곱해지고, 각자 1:1로 곱해진 결과값이 더해짐
                e.g. (1*1)+(2*0)+(3*-1) = 새로운 벡터의 첫번째 행의 값
                     (4*1)+(5*0)+(6*-1) = 새로운 벡터의 두번째 행의 값 

    ** 첫번째 것의 열 개수, 두번째 것의 행 개수가 일치해야지 행렬x 벡터 곱이 가능함

- 벡터의 내적: 
  두 벡터 u와 v의 내적은 행벡터 u와 열벡터 v의 곱으로 계산할 수 있고 그 결과는 스칼라 값.



====================================================================

<< 행렬 (matrix) >>

- 행렬의 종류:

  A) 단위행렬(항등행렬): 
     - 단위 행렬 (영어: unit matrix) 또는 항등 행렬(영어: identity matrix)이라고 함
     - 행렬 곱셈 연산에 항등원으로 작용하는 행렬로서 대각선 요소는 모두 1이고, 나머지 요소는 모두 0인 정사각 행렬
     - 단위행렬은 행렬과 그 역행렬이 동일한 유일한 행렬

       기본 방법: 
       np.identity(행열 개수)
       np.eye(행열 개수, dtype= 데이터타입 지정) # dtype은 생략 가능
       e.g. np.identity(3)
            np.eye(3)
       ==> 행과 열의 숫자가 같아야 함 

        [[1. 0. 0.]
         [0. 1. 0.]
         [0. 0. 1.]]

     - X 행렬과 단위행렬이 곱해지면 결과값은 X 행렬이 나옴
       e.g. im=np.identity(4)
            matrix1=np.arange(16).reshape(4,4)
            print(np.dot(im,matrix1))

            ==> 결과 : im x matrix1 
                im=
                [[1. 0. 0. 0.]
                 [0. 1. 0. 0.]
                 [0. 0. 1. 0.]
                 [0. 0. 0. 1.]] 
                
                matrix1=
                [[ 0  1  2  3]
                 [ 4  5  6  7]
                 [ 8  9 10 11]
                 [12 13 14 15]] 
                
                np.dot(im,matrix1)= 
                [ 0.  1.  2.  3.]
                 [ 4.  5.  6.  7.]
                 [ 8.  9. 10. 11.]
                 [12. 13. 14. 15.]]

  B) 대각행렬 (diagonal matrix) : 
     - 주대각선 원소를 제외한 모든 원소들이 0인 정방행렬

       기본 방법:
       np.diag([요소 리스팅])
       e.g. np.diag([2,4,6,8,10])

      [[ 2  0  0  0  0]
       [ 0  4  0  0  0]
       [ 0  0  6  0  0]
       [ 0  0  0  8  0]
       [ 0  0  0  0 10]]

     - 대각행렬에 scalar 가 곱해지면 주대각선 원소만 원소값*scalar 에 대한 결과가 반영. 
       0인 요소는 모두 0 유지됨
     - 대각행렬과 벡터가 곱해지면 주대각선 원소와 벡터의 요소들이 1:1로 곱해지고, 
       결과로 shape이 mxn 에 맞춰 나오며,
       그 요소는 주대각선 원소와 벡터 요소의 곱한 값으로 들어감
       e.g. a=np.diag([1,3,6])
            b=np.array([1,2,3])
            result=np.dot(a,b)

            ==> 결과 : axb
            a=
            [[1 0 0]
             [0 3 0]
             [0 0 6]] 
            
            b=
            [1 2 3] 
            
            result=np.dot(a,b)
            [ 1  6 18]


  C) 영행렬 (zero matrix) : 
     - 모든 원소가 0인 행렬로 곱셈 연산에서 영원으로 작용하는 행렬
     - 어떤 행렬이든 영행렬과 곱해지면 요소가 모두 0 값으로 나옴
     - 어떤 행렬과 영행렬이 더해지면 어떤 행렬 자기 자신이 결과값임

       기본 방법:
       np.zeros((행수, 열수))
       e.g. np.zeros((3,3))

      [[0. 0. 0.]
       [0. 0. 0.]
       [0. 0. 0.]]


  D) 전치행렬 (transpose matrix) : 
     - 주대각선 원소를 기준으로 행과 열을 바꿔주는 행렬

       기본 방법:
       np.transpose(행렬명)
       변수명=행렬명.transpose()
       행렬명.T
       e.g. a=np.arange(12).reshape(3,4)
            a.T

            ==> 결과:
            a=
            [[ 0  1  2  3]
             [ 4  5  6  7]
             [ 8  9 10 11]] 
            
            a.T=
            [[ 0  4  8]
             [ 1  5  9]
             [ 2  6 10]
             [ 3  7 11]]


  E) 대칭행렬 (symmetric matrix) : 
     - 주대각선을 기준으로 대칭을 이루는 행렬로서 전치 행렬이 자기 자신과 같은 행렬    
       e.g. 
       [[1 2 3]
        [2 5 6]
        [3 6 9]] 

      - 대칭 행렬인지 확인하는 방법 :
          np.allclose(행렬명, 행렬명.T) 
          ==> 행렬명.T : 해당행렬을 전치 행렬로 변환

          e.g. 
          a=np.array([[1,2,3],[2,5,6],[3,6,9]]) # 대칭 행렬
          b=a.T
          print(np.allclose(a,b))

          ==> 결과:          
          a=
          [[1 2 3]
           [2 5 6]
           [3 6 9]] 
          
          b=a.T
          [[1 2 3]
           [2 5 6]
           [3 6 9]] 
          
          np.allclose(a,b) 결과: 
          True


  F) 정방행렬 (square matrix) : 
     - 행과 열의 수가 같은 행렬

       e.g.
       [[0 1 2]
        [3 4 5]
        [6 7 8]]



G) 대각합: 
     - 정사각 행렬의 대각선 요소의 합
       ** 행렬이 대각행렬일 필요는 없음. 아무 행렬의 대각선 요소의 합을 구해줌

       기본 방법:
       np.trace(행렬명)
       e.g. a=np.diag([2,4,6,8,10])
            np.trace(a)

       ==> 결과:
            a=
            [[ 2  0  0  0  0]
             [ 0  4  0  0  0]
             [ 0  0  6  0  0]
             [ 0  0  0  8  0]
             [ 0  0  0  0 10]] 
            
            np.trace(a)
            30

  H) 역행렬: 
     - 원래 행렬 A와 곱할 때 단위 행렬이 되는 행렬
     - 행렬A와 A의 역행렬을 곱하면 단위행렬 (identity matrix)가 나와야 함. 단위행렬이 성립되지 않으면 역행렬이 아님 

       기본 방법:
       np.linalg.inv(행렬명)
       e.g. A=np.array([[1,2],[3,4]])
            A_inverse = np.linalg.inv(A)
            A @ A_inverse # A와 그 역행렬 A를 행렬 곱셈으로 계산한 결과

            ==> 결과 :
            A=
            [[1 2]
             [3 4]] 
            
            A_inverse=
            [[-2.   1. ]
             [ 1.5 -0.5]] 
            
            A @ A_inverse=
            [[1.0000000e+00 0.0000000e+00]
             [8.8817842e-16 1.0000000e+00]]



  I) 삼각행렬: 
     - 주대각선 위 또는 아래의 모든 요소가 0인 특별한 종류의 정방행렬
    
      1. 상삼각행렬: 
         - 대각선 아래 모든 요소가 0인 행렬
           e.g. 
           [[1. 1. 1.]
            [0. 1. 1.]
            [0. 0. 1.]] 

           기본 방법:
           np.triu(np.만들행렬(요소))
           e.g. A=np.triu(np.ones((3,3)))


      2. 하삼각행렬: 
         - 대각선 위 모든 요소가 0인 행렬
           e.g. 
           [[1. 0. 0.]
            [1. 1. 0.]
            [1. 1. 1.]] 

           기본 방법:
           np.tril(np.만들행렬(요소))
           e.g. B=np.tril(np.ones((3,3))) 

        ** 기본 행렬을 np.triu(행렬명) 혹은 np.tril(행렬명)을 사용하여 삼각행렬로 바꿀 수도 있음.
           e.g. a=np.arange(9).reshape(3,3) # 임의의 행렬
                np.triu(a) # 임의의 행렬을 상삼각 행렬로 만들기
                np.tril(a) # 임의의 행렬을 하삼각 행렬로 만들기

                ==> 결과
                a=
                [[0 1 2]
                 [3 4 5]
                 [6 7 8]]
                
                np.triu(a)
                [[0 1 2]
                 [0 4 5]
                 [0 0 8]]
                
                np.tril(a)
                [[0 0 0]
                 [3 4 0]
                 [6 7 8]]

====================================================================

역행렬 만들기:
  np.linalg.inv(행렬명)
  e.g. l=np.eye(3)
       np.linalg.inv(l)


모두 해당되는지 확인:
- 결과는 bool 값으로 반환 
  np.all(조건)
  e.g. np.all(Z==0)
      ==> Z 는 0인지 (Z 행렬에 들어 있는 요소는 모두 0으로 구성되어 있는지)


np.allclose(행렬1, 행렬2)


역행렬 확인 방법:
  np.linalg.det(행렬명)
  e.g. A=np.array([[1,2,3],[0,1,4],[5,6,0]])
       np.linalg.det(A)
       ==> 결과: 
           0.9999999999999964 
           ==> 역행렬 존재함

====================================================================





