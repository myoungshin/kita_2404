<< 시각화 >>

Pandas는 주로 Matplotlib 라이브러리를 기반으로 하여 시각화를 구현하며, 
간단한 코드로 다양한 그래프를 생성

[ 주요 시각화 함수 ]

plot(): 기본적인 시각화 함수를 제공하며, 다양한 종류의 그래프를 그릴 수 있다.

kind 매개변수를 통해 그래프의 종류를 지정할 수 있다. (line, bar, barh, hist, box, kde, density, area, pie, scatter, hexbin 등)

hist(): 히스토그램을 생성.
boxplot(): 박스 플롯을 생성.
scatter_matrix(): 여러 변수 간의 산점도 행렬을 생성.
plot.scatter(): 산점도를 생성.
plot.bar(): 막대 그래프를 생성.
plot.kde(): 커널 밀도 추정 그래프를 생성.


=============================================================

<< 다양한 스타일의 그래프 아래 코드로 확인하여 사용 가능 >>

- 사용 가능 그래프 확인:
plt.style.available


- 사용 시 코드 작성 예시:
plt.style.use('ggplot')
x=df_auto['mpg']
y=df_auto['weight']

plt.figure(figsize=(8,6))
plt.scatter(x,y, color='blue')
plt.grid(True)
plt.title('Scatter Plot (ggplot)', size=20)
plt.ylabel('weight')
plt.xlabel('mpg')


=============================================================

<< 그래프 생성 기본 포맷 >>

데이터프레임.plot(kind='그래프종류',color=['색상','색상'])
plt.title('테이블이름')
plt.xlabel('변수')
plt.ylabel('변수')
plt.xticks(rotation= ) # <== rotation 뒤에 원하는 각도 넣기. (e.g. 가로=0, 45도=45)
plt.legend()
plt.show()





=============================================================

<< line graph >>

데이터프레임.plot()
plt.title('그래프이름')
plt.show()


<< bar graph >>

데이터프레임.plot.bar()
plt.title('그래프이름')
plt.show()


<<< histogram >>

데이터프레임.plot.hist(alpha=00,bins=00, color='색상')
plt.title('그래프이름')
plt.show()
==> alpha== 투명도. 숫자가 높을 수록 색이 진해짐. 
==> bins== 구간. 숫자가 높을수록 더 촘촘해짐
==> color== 그래프 색상

<< box plot >>

데이터프레임.plot.box()
plt.title('그래프이름')
plt.show()

혹은 

plt.boxplot(변수명)
plt.title('그래프이름')
plt.ylabel('라벨')
plt.show()

e.g. data=np.array([50,85,90,78,92,88,76,95,89,77,91,130])
     plt.boxplot(data)
     plt.title('Box Plot of Data')
     plt.ylabel('Value')
     plt.show()

<< scatter plot >>

데이터프레임.plot.scatter(x='열이름',y='열이름')
plt.title('그래프이름')
plt.show()

e.g. df=pd.DataFrame(np.random.rand(50,4), columns=['A','B','C','D'])
    # 양의 상관관계
    df['C']=df['A']*2+np.random.rand(50)*0.5
    
    # 음의 상관관계
    df['D']=-df['A']*2+np.random.rand(50)*0.5
    
    fig, axs=plt.subplots(1,2,figsize=(14,6))
    
    axs[0].scatter(df['A'],df['C'], color='blue')
    axs[0].set_title('Positive Correlation')
    axs[0].set_xlabel('A')
    axs[0].set_ylabel('C')
    
    axs[1].scatter(df['A'],df['D'], color='red')
    axs[1].set_title('Negative Correlation')
    axs[1].set_xlabel('A')
    axs[1].set_ylabel('D')
    
    plt.suptitle('Scatter Plots of Positive and Negative Correlation')
    plt.show()


<< KDE (커널 밀도 추정) >>

- 데이터의 분포를 부드럽게 나타내는 그래프

e.g.  import pandas as pd
      import numpy as np
      import matplotlib.pyplot as plt
      
      # 데이터 생성
      data=pd.DataFrame({
          'A': np.random.randn(1000),
          'B': np.random.randn(1000)+1
      })
      
      # KDE 그래프
      data['A'].plot.kde(label='A')
      data['B'].plot.kde(label='B')
      plt.title('Kernel Density Estimate(KDE) Plot')
      plt.xlabel('Value')
      plt.ylabel('Density')
      plt.legend()
      plt.show()


<< 다른 그래프와 KDE 함께 그리기 >>


e.g.  import pandas as pd
      import numpy as np
      import matplotlib.pyplot as plt
      
      # 데이터 생성
      data=pd.Series(np.random.randn(1000))
      
      # 히스토그램과 KDE 같이 그리기
      ax=data.plot.hist(bins=30, alpha=0.5, density=True, label='Histogram') # 히스토그램
      data.plot.kde(ax=ax, label='KDE') # KDE 그래프
      plt.title('Histogram and KDE Plot')
      plt.xlabel('Value')
      plt.ylabel('Density')
      plt.legend()
      plt.show()




<< heatmap >>


e.g. sns.heatmap(data, annot=True, cmap='coolwarm',xticklabels=['A','B','C'],yticklabels=['A','B','C'])
     plt.title('Heatmap of Chemical Compounds A, B, C')
     plt.show()


<< 밀도 그래프 >>

sns.kdeplot(변수명, fill=True)
plt.title('그래프 이름')
plt.xlabel('x축 라벨')
plt.ylabel('y축 라벨')
plt.show()

e.g. sns.kdeplot(house_price, fill=True)
     plt.title('Density Plot of House Prices')
     plt.xlabel('Price')
     plt.ylabel('Density')
     plt.show()


<< 도수 분포표 >>


e.g. (unique, counts)=np.unique(score, return_counts=True)
     frequency_table=np.asarray((unique, counts)).T
     print(frequency_table)


<< 추세선 있는 산점도 >>


e.g. x=np.arange(100)
     x=x
     y=x+np.random.normal(0,10,len(x)) # len(x) : x의 개수와 동일한만큼 y의 개수 생성
    
     plt.scatter(x,y)
     m,b=np.polyfit(x,y,1)
     plt.plot(x, m*x+b, color='red')
     plt.title('Scatter Plot with Trend Line')
     plt.xlabel('x')
     plt.ylabel('y')
     plt.show()


<< 파이 차트 >>


e.g. labels='young', 'teen','adult','mature','elder'
     sizes=[64,115,432,81,22] # 각 라벨의 값
     explode=(0,0,0.1,0,0) # 가장 큰 'adult' 부각되도록. 부각시키고 싶지 않으면 모두 0 혹은 explode 안쓰면 됨
     
     plt.figure(figsize=(5,5))
     # autopct='%1.1f%%' : 최소 1자리, 소수점 아래 숫자의 최대 자리수  
     plt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
     plt.axis('equal') # 차트가 원형으로 유지되도록 한다. 즉, 가로세로 비율이 같도록 설정 
     plt.title("Titanic Age Group")
     plt.show()




=============================================================

<< Seaborn 사용하여 시각화 >>

import seaborn as sns
import matplotlib.pyplot as plt

e.g. titanic3파일에서 성별과 승객 (생존, 사망) 수 관계 시각화
      sns.countplot(x='sex', hue='survived', data=df)
      plt.title('Survival count by Sex')
      plt.xlabel('Sex')
      plt.ylabel('Count')
      plt.legend(title='Survived')
      plt.show()


=============================================================

<< Matplotlib 사용하여 시각화 >>

import numpy as np
import matplotlib.pyplot as plt

e.g. x=np.arange(1,21,2)
     y=np.array([3,5,6,13,30,21,22,29,33,32])
     plt.figure(figsize=(5,5))
     plt.plot(x,y,color='blue',marker='o', markersize=3)
     plt.title('Lineplot Matplotlib', size=15)
     plt.xlabel('x', size=12)
     plt.ylabel('y', size=12)
     plt.legend(labels=['lineplot'])

=============================================================

<< 한 판에 상이한 데이터들 그래프 넣기 >>

# 두개의 다른 종에 대한 분포를 한 그래프에서 나타내기:

length_a=fish_multi.query('species=="A"')['length']
length_b=fish_multi.query('species=="B"')['length']
sns.histplot(length_a, bins=5, color='gray',kde=True)
sns.histplot(length_b, bins=5, color='skyblue',kde=True)


# boxplot으로 A, B 비교 한판에
plt.figure(figsize=(5,3))
sns.boxplot(x='species', y='length',data=fish_multi, color='skyblue')


# 바이올린 플롯 : 
# 박스 플롯과 커널 밀도 추정을 결합한 형태로 데이터의 형태를 좀 더 직관적으로 이해할 수 있게 해줌 
# 커널 밀도추정의 결과를 y 축 방향에 추가하여 데이터가 퍼져있는 분산의 정도 파악
plt.figure(figsize=(5,3))
sns.violinplot(x='species',y='length', data=fish_multi,color='skyblue')

# jointplot :
# Assuming 'cov_data' is your DataFrame and it has columns 'x' and 'y'
# x, y의 히스토그램과 kde,
# x와 y 간의 산점도와 추세선, 오차의 범위까지 (추세선 위 아래로 있는 옅은 배경색 부분)
# 을 한 번에 보여줌

sns.jointplot(x='x',y='y', data=cov_data, kind='reg') # reg=regression. 회귀 보고 싶지 않으며 코드에서 제외시키면 됨
plt.show()



lmplot :
# sns.lmplot 사용 예시
sns.lmplot(x='x',y='y',data=data, hue='category')
plt.title('sns.lmplot Example')
plt.show()


regplot :
# sns.regplot 사용 예시
plt.figure(figsize=(6,4))
sns.regplot(x='x',y='y', data=data)
plt.title('sns.regplot Example')
plt.show()


lineplot :
plt.figure(figsize=(6,4))
sns.lineplot(data=df_auto, x='model year', y='mpg', hue='origin', err_style='band', palette=['red','green','blue'])
# err_style = 오차 범위
# hue = 다중 그래프 사용할 경우 기준 변수


pairplot :
# 설정한 변수들을 1:1 관계로 x,y축에 놓고 그려줌
# 히스토그램은 자기 자신인 경우, scatter는 자신과 타 변수의 관계
sns.pairplot(df_auto[['mpg', 'weight','displacement']],palette='rainbow')

=============================================================

# countplot()
# sns.set_style을 통한 그래프 미화 작업 

plt.figure(figsize=(8,4))
sns.set_style('whitegrid')
sns.countplot(x='size', data=tips, hue='time', palette='bone') # 타임 별 테이블 사이즈 (인원수) 
plt.title("count plot")
plt.show()



# sns.set_style('')로 위 바그래프 미화:
sns.set_style({'font.family':'serif', 'font.serif':['Times New Roman']})
sns.set_style('whitegrid')
plt.style.use('bmh')
sns.barplot(x='tip_pct', y='day', hue='time', data=tips, orient='h', errorbar=None, width=0.7) # dinner, lunch 타임 구분을 위해 hue='time 추가

=============================================================

<< 한글 깨짐 방지 >>

# 설치 후 세션 다시 시작
# Google colab에는 한국어 글꼴이 사전 설치되어 있지 않으므로 수동으로 설치

!sudo apt-get install -y fonts-nanum # 'NanumBarunGothic' 글꼴을 설치
!sudo fc-cache -fv # 글꼴 캐시를 새로 고치고
!rm ~/.cache/matplotlib -rf


- 한글 깨짐 방지 후 그래프 그리기:





