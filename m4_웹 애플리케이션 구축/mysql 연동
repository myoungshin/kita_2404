# MySQL 데이터베이스 연결 설정

import pymysql

# 데이터베이스 연결
connection=pymysql.connect(
    host='localhost',
    user='msnl',
    password='msnl',
    database='msnl_db'
)

cursor=connection.cursor()

===============================================

# 테이블 생성
create_table_query="""
CREATE TABLE IF NOT EXISTS customer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    age INT)
"""
cursor.execute(create_table_query)
connection.commit()


# 컬럼 추가
# 이 컬럼은 TIMESTAMP 데이터 타입을 가지며, 기본값으로 현재 타임스탬프 (CURRENT_TIMESTAMP)가 설정.
# 즉, 새로운 레코드가 삽입될 때 자동으로 현재 시간이 기록됨
alter_table_query="ALTER TABLE customer ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP"
cursor.execute(alter_table_query)
connection.commit()


# email 컬럼에 NOT NULL 제약조건 제외
# 기존에 email VARCHAR(100) NOT NULL 이 들어갔는데 뒤에 NOT NULL만 제외해서 MODIFY 해주면됨
alter_table_query="ALTER TABLE customer MODIFY email VARCHAR(100)"
cursor.execute(alter_table_query)
connection.commit()


# 테이블 삭제
drop_table_query="DROP TABLE IF EXISTS customer"
cursor.execute(drop_table_query)
connection.commit()


# 연결 종료
cursor.close()
connection.close()


===============================================

# 데이터 입력
insert_query="INSERT INTO customer (username, email, age) VALUES (%s, %s, %s)"
data=("john_doe", "john@example.com", 30)
cursor.execute(insert_query, data)
connection.commmit()


# 데이터 수정
update_query="UPDATE customer SET age = %s WHERE username=%s"
cursor.execute(update_query, (31, "john_doe"))
connection.commit()


# 데이터 조회
select_query="SELECT*FROM customer"
cursor.execute(select_query)
results=cursor.fetchall()
for row in results:
    print(row)


# 데이터 삭제
delete_query="DELETE FROM customer WHERE username=%s"
cursor.execute(delete_query, ("john_doe",))
connection.commit()


# 데이터 반복 삽입
# 각 항목은 리스트나 튜플과 같은 순서가 있는 데이터 구조여야 함
customers=[
    ("alice", "alice@example.com", 25),
    ("bob", "bob@example.com", 28),
    ("charlie", "charlie@example.com", 22)
]
cursor.executemany(insert_query, customers) # insert_query는 위에 데이터 입력시 정의됨
connection.commit()


===============================================

----- [ db 데이터를 데이터프레임으로 변환 ] -----
# 데이터 조회 결과를 dataframe 으로 변환
import pandas as pd

# 컬럼 이름을 가져오기
column_names=[desc[0] for desc in cursor.description]

# dataframe으로 변환
df=pd.DataFrame(results, columns=column_names)

# dataframe 출력
print(df)


----- [ 데이터프레임 csv 파일로 저장 ] -----
# dataframe을 csv 파일로 저장
df.to_csv("customers.csv", index=False)


===============================================

----- [ csv 파일을 데이터베이스에 넣기 ] -----
1. 일단 파이썬에서 create table로 csv 파일의 데이터를 넣을 테이블을 만들어줘야함
2. csv 파일 데이터베이스에 삽입.


< 2. csv 파일 데이터베이스에 삽입 단계: >
# csv 파일 읽어서 데이터베이스에 삽입
import csv

# csv 파일 읽기
file_path='customers.csv'
df=pd.read_csv(file_path)

# 필요한 컬럼만 선택
data_to_insert=df[['username', 'email', 'age']].values.tolist()

# sql 쿼리 정의
insert_query="INSERT INTO buyer (username, email, age) VALUES (%s, %s, %s)"

cursor.executemany(insert_query, data_to_insert)
connection.commit()



===============================================

파이썬과 db 연동하여 사용하다 이전 사용 내역이 남아서 db 에러 생기는 경우 있음
이 경우 db 들어가서 table 기록 확인하고
alembic 어쩌고가 있으면 그 부분 삭제해 줘야 함. 
삭제 방법은 :
1. 파이썬에서 select*from alembic version 을 쳐서 버전 넘버 확인하고
2. db에다가 하기 쿼리 넣어서 실행:
    DELETE FROM alembic_version WHERE version_num = '버전 넘버'



















