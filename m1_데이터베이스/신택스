<< Oracle SQL Developer >>
명령어는 대소문자 상관없음

===============================================================

[ User 만들기 ]

DROP USER c##md CASCADE;
CREATE USER c##md IDENTIFIED BY md DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp PROFILE DEFAULT;
GRANT CONNECT, RESOURCE TO c##md;
GRANT CREATE VIEW, CREATE SYNONYM TO c##md;
GRANT UNLIMITED TABLESPACE TO c##md;
ALTER USER c##md ACCOUNT UNLOCK;

===============================================================

[ 테이블 생성 ] 

기본 형태:
  create table 테이블명(
  열이름 데이터타입 제약조건,
  ...);
  ==> 제약조건은 필수는 아님. 필요에 따라 내용 추가

e.g. CREATE TABLE Book (
     bookid NUMBER(2) PRIMARY KEY,
     bookname VARCHAR2(40),
     publisher VARCHAR2(40),
     price NUMBER(8)
     );


[ on delete cascade + foreign key 설정 ]

on delete cascade 옵션이 설정되어 있어, 
newcustomer 테이블에서 어떤 고객의 레코드가 삭제되면, 
해당 고객의 모든 주문이 neworders 테이블에서도 자동으로 삭제

e.g. create table newcustomer(
     custid number primary key,
     name varchar2(40),
     address varchar2(40),
     phone varchar2(30));
    
     create table neworders(
     orderid number,
     custid number not null,
     bookid number not null,
     saleprice number,
     orderdate date,
     primary key(orderid),
     foreign key(custid) references newcustomer(custid) on delete cascade);


===============================================================

[ 테이블 스키마 확인 ]
desc 테이블명;
==> 해당 테이블의 각 열에 대한 정보 확인 가능 (e.g. 열이름, 데이터 타입 등)


===============================================================

[ 테이블에 데이터 입력 ]
insert into 사용
-- 테이블에 데이터를 입력하는 방법은 두 가지 유형이 있으며, 한 번에 한 건만 입력 가능
-- 1. insert into 테이블명 (column_list) values (column_list에 넣을  value_list); <== 몇개의 속성에 (변수) 대한 데이터만 넣을 경우 
-- 2. insert into 테이블명 values (전체 column에 넣을 value_list); <== 전체 속성에 대한 데이터를 넣을 경우 사용

기본 형태:
  insert into 테이블명 values(행 데이터 입력,...);

- 테이블에 열 추가 
alter + add 사용
기본 형태:
  alter table 테이블명 add 열이름 데이터타입;
    e.g. alter table newbook add author_id number;

- 테이블 기전 제약조건 수정 
alter + modify 사용
기본 형태: 
  alter table 테이블명 modify (열이름 데이터타입 수정내용));
      e.g. alter table newbook modify (isbn varchar2(50));
           ==> alter 사용 시 테이블 안의 데이터가 모두 비워진 상태에서만 사용 가능

- 테이블의 특정 열 삭제 
alter + drop 사용
기본 형태:
  alter table 테이블명 drop column 열이름;
      e.g. alter table newbook drop column author_id;
  

===============================================================

[ 데이터 삭제 ] 

delete 테이블명;
  e.g. delete mart
       ==> 해당 테이블에 들어 있는 모든 데이터 삭제


delete 테이블명 where 변수명='조건';
  e.g. delete mart where custid=1234
       ==> 해당 테이블의 해당 조건에 해당되는 변수에 대한 데이터 전체 삭제
    
===============================================================

[ 뷰 - 실제 데이터/테이블 수정 없이 쿼리문 저장하여 가상으로 테이블 사용 ]

create view
- 오라클 SQL에서 테이블의 특정 부분이나 조인된 결과를 논리적인 뷰(view)로 만들 때 사용
- 뷰는 데이터를 요약하거나 복잡한 조인을 단순화하며, 사용자에게 필요한 데이터만을 보여주는 데 유용
- 뷰는 실제 테이블 데이터를 저장하지 않고, 대신 쿼리문 자체를 저장
- 뷰의 주요 특징
- 쿼리 단순화: 복잡한 쿼리를 뷰로 저장함으로써 사용자는 복잡한 쿼리문을 반복해서 작성할 필요 없이 간단하게 뷰를 참조할 수 있다.
- 데이터 추상화: 뷰는 기본 테이블의 구조를 숨기고 사용자에게 필요한 데이터만을 보여줄 수 있어, 데이터 추상화를 제공.
- 보안 강화: 뷰를 사용하면 특정 데이터에 대한 접근을 제한할 수 있으며, 사용자가 볼 수 있는 데이터의 범위를 제어할 수 있다.
- 데이터 무결성 유지: 뷰를 사용하여 데이터를 수정하더라도, 이 변경사항이 기본 테이블의 데이터 무결성 규칙을 위반하지 않도록 관리할 수 있다.
  ==> 이전에 쿼리로 생성한 테이블에서 사용된 변수들을 이후 사용할 수 있도록 해줌...?

  기본 형태 :
    (뷰 생성) :
    create view 뷰이름 as
    select 변수명1,...변수명n
    from 변수들 가져올 테이블
    e.g. create view employee_details as -- <== "employee_details" 라는 view 이름으로 아래 테이블을 생성하고 가상 저장해두겠다는 뜻
         select employee_id, last_name, department_id
         from employees;
         ==> 기존에 원하는 내용으로 데이터 확인하려고 했던거에다가 create view 라인만 추가해주면 됨
    e.g. create view "부서별 직원수" as
         select d.department_name, count(*) as 직원수
         from departments d
         join employees e on d.department_id=e.department_id
         group by d.department_name
         order by d.department_name;

    (뷰 불러오기) :
    select*from 뷰이름;
    ==> 기존에 테이블 불러올 때아 동일한 방식

drop view 
- 생성한 뷰 삭제.
  기본 형태: 
    drop view 뷰이름;




===============================================================

[ 데이터/테이블 선택 ]

해당 테이블 전체 뷰잉
- SELECT * FROM 테이블;
  e.g. SELECT * FROM customer;

보고싶은 내용에 대해서만 특정 테이블에서 불러와 보기
- SELECT 변수1, ..., 변수n FROM 테이블;
  e.g. SELECT publisher FROM book;

중복값 제거하여 보기
- SELECT DISTINCT 변수 FROM 테이블;
  e.g. SELECT DISTINCT publisher FROM book;

===============================================================

[ 특정 조건으로 선택 ]

조건 걸어 데이터 선택할 경우에는 where를 먼저 써줘야 함
- WHERE 조건~~~;
  e.g.  SELECT * FROM book
        WHERE price BETWEEN 10000 AND 20000;

- 조건1 AND 조건2: 조건1과 조건2에 모두 부합하는 케이스
  e.g.  SELECT bookname, price FROM book
        WHERE bookname like '축구' and price>=20000;

- 조건1 BETWEEN 조건2: 조건1과 조건2 사이에 들어가는 케이스
  e.g.  SELECT * FROM book
        WHERE price BETWEEN 10000 AND 20000;

- 변수 in ('조건1', '조건2') : 
  ==> or 대신으로 사용됨
  e.g.  SELECT * FROM book
        WHERE publisher in ('굿스포츠','대한미디어');

  e.g. select*from employees where manager_id in (101,102,103);
       ==> 아래 코드와 동일한 내용이 나옴 (or 사용문)
           select*from employees where manager_id=101 or manager_id=102 or manager_id=103;

- union : 합집합. 둘 중 하나라도 속하면 출력
  e.g.  SELECT * FROM book
        WHERE publisher='굿스포츠' 
        union 
        select * from book 
        where publisher='대한미디어';
  e.g. select first_name 이름, salary 급여 from employees
       where salary<5000
       union
       select first_name 이름, salary 급여 from employees
       where hire_date <'99/01/01';

- intersect : 교집합. 1,2번 내용 모뒈 해당되는 케이스만 출력
e.g. select first_name 이름, salary 급여, hire_date from employees
     where salary < 5000
     intersect
     select first_name 이름, salary 급여, hire_date from employees
     where hire_date <'05/01/01';

- minus : 차집합. 1번째 내용에 해당되지만 두번째 내용에는 해당되지 않는 케이스 출력
e.g. select first_name 이름, salary 급여, hire_date from employees
     where salary < 5000
     minus
     select first_name 이름, salary 급여, hire_date from employees
     where hire_date <'05/01/01';

- union all : 겹치는 것까지 포함. 1번과 2번 케이스에 모두 해당된다면 중복되어 출력됨
e.g. select first_name 이름, salary 급여, hire_date from employees
     where salary < 5000
     union all
     select first_name 이름, salary 급여, hire_date from employees
     where hire_date <'05/01/01';
** union, intersect, minus, union all 은 모두 두개의 쿼리문을 사용해야하며
   데이터 타입을 일치시켜야 함


====================

이후 세부 조건 달아줌:
- like 조건: 정확하게 '조건'과 일치하는 케이스
  e.g. SELECT bookname, publisher FROM book
       WHERE bookname LIKE '축구의 역사';

- unlike 조건: '조건'과 일치하지 않는 케이스
  e.g. SELECT bookname, publisher FROM book
       WHERE bookname UNLIKE '축구';

- %조건% : '조건'이 포함된
  e.g. SELECT bookname, publisher FROM book
       WHERE bookname LIKE '%축구%';

- 변수='조건' : 변수가 '조건'과 정확히 일치하는 경우
  e.g.  SELECT * FROM book
        WHERE (publisher='굿스포츠') or (publisher='대한미디어');

- 변수명 is null/ is not null: null 값인지 확인할 때 사용
  e.g. select*from employees where commission_pct is null;
       ==> commision_pct 이 빈값인 케이스 모두 출력
  e.g. select*from employees where commission_pct is not null;
       ==> commision_pct 에 값이 있는 케이스 모두 출력


- _'문자열'% : 특정 위치에 특정 문자열을 같는 데이터 찾기
  e.g. SELECT bookname, publisher FROM book
       WHERE bookname LIKE '_구%';

- group by : 특정 조건에 맞춰 그루핑하여 뷰잉
  select 변수명1, ..., 변수명n
  from 테이블
  group by 그루핑하고 싶은 변수
    e.g. SELECT custid, COUNT(*)AS 도서수량, sum(saleprice) AS "총 판매액"
         From orders
         Group by custid;
          ==> orders 테이블에서 custid, 데이터 셀 개수, saleprice를 선택하여
              custid별로 데이터 묶는데
              saleprice는 custid별의 합계를 계산해 '총 판매액'이라는 새 변수로 넣어 제시

- having count(*) : group by 뒤에 세부 조건 붙일 때 사용
  e.g. SELECT custid, COUNT(*)AS 도서수량, sum(saleprice) AS "총 판매액"
       From orders
       Where bookid>=5
       Group by custid
       HAVING COUNT(*)>2;
       ==> 위에서 custid로 새로 정리된 데이터를 제시하는데,
           그 중 custid 별 count가 (데이터 셀 총 개수) 2 이상인 경우만 선택

=============================================================== 

[ 데이터를 새로 조합하여 뷰잉할 때 ]

- 글자수
length (): 문자열의 길이 카운팅해줌
  e.g. select job_id, length(job_id) from employees;
       ==> job_id와, job_id의 총 문자열 길이를 세서 제시

- 바이트 수 :
lengthb : 바이트수
  e.g. select bookname 제목, length(bookname) 글자수, lengthb(bookname) 바이트수
       from book
       where publisher='굿스포츠';

- 문자열 내에서 특정 부분으로만 데이터 재정렬해서 뷰잉
  substr(변수명, 몇번째 글자부터, 몇개의 글자)
  ** sql은 인덱스가 1부터 시작 (0부터 시작하는 파이썬과는 다름!!!!)
  ** 시작 위치가 -라면 뒤에서부터 카운팅 
  e.g. select*from customer;
       select substr(name,1,1)성 , count(*) 인원 -- <== 여기서의 count(*)은 그룹내에서의 전체
       from customer
       group by substr(name,1,1);
       ==> substr(name,1,1) 함수는 문자열 name의 첫번째 글자부터 시작하여 한 글자를 반환
       ==> group by 절에서는 별칭이 아닌 substr(name,1,1) 표현식을 사용해야 함
  e.g. select substr('Hello World', -3,3) from dual;
      ==> 해당 문자열에서 끝에서 3번째 인덱스부터 3개의 문자열 (순방향으로) 반환
      ==> 반환 값 : rld

- 특정 문자열 안에서 특정 문자를 특정 위치에서 찾기
  instr(문자열, 찾을 문자, 찾을 위치, 찾은 문자 중 몇 번째인지 위치)
  e.g. select 'Hello World', instr('Hello World', 'o', 3, 2) from dual;
       ==> 'Hello World' 문자열에서 o를 찾는데, 이 o는 해당 문자열에서 3번째 인덱스부터 찾기 시작하고, 2번째 o의 위치를 알려줘, 라는 뜻
      ==>  따라서, World의 o 위치가 반환됨

- 다른 열에 있는 데이터를 하나로 합칠 때 (각 열에 있는 문자열을 하나로 합치기)
  변수명1 || ' ' || 변수명2 as '별칭'
  e.g. select e.employee_id 사번, e.first_name||''|| e.last_name as 이름, e.job_id 업무, j.job_title 업무명
       from employees e
       inner join jobs j on e.job_id=j.job_id
       where e.employee_id=120;
       ==> first_name과 last_name 의 데이터를 합치고 '이름'이라는 새로운 변수명으로 제시해줌
       ==> 하나의 열에 last_name, is a, job_id 가 붙는 형태
  
  변수명1, '넣을 내용', 변수명2 
  e.g. select last_name, 'is a', job_id from employees;
       ==> 개별 열에 last_name, is a, job_id 가 붙는 형태


- 특정 조건의 데이터에 대해 신규 열 & 데이터 추가하여 볼 때
temporary 데이터명+신규 열이름 사용
e.g. Q. employees 테이블에서 department_id가 없는 직원을 추출하여 position을 '신입'으로 출력 (position 열을 추가).
        select employee_id, first_name||' '|| last_name full_name, '신입' position
        from employees
        where department_id is null;
        ==> 실제 테이블에 열 추가는 아님. 뷰잉할 때만 position 열 나옴

- 문자열 전체 대문자화 
  upper(값)
  e.g. select upper('Hello World') from dual;


- 문자열 전체 소문자화
  lower(값)
  e.g. select lower('Hello World') from dual;
  e.g. select employee_id, first_name||' '||last_name as 이름, salary
       from employees
       where lower(last_name)='seo';
       ==> last_name 이 Seo인 직원의 last_name과 salary를 구하세요 (Seo, seo, SEO 모두 검출되야함)

- 문자열 첫글자만 대문자화
  initcap(값)
  e.g. select job_id, initcap(job_id) from employees;
       ==> AC_ACCOUNT -> Ac_Account 로 바뀌어서 제시됨





<< 문자열 정렬 >>

lpad(문자열, 총 문자열 수, 공백 무엇을 채울지)
- 오른쪽 정렬 후 왼족에 문자를 채움
  e.g. elect lpad('Hello World', 20, '#') from dual;

rpad(문자열, 총 문자열 수, 공백 무엇을 채울지)
- 왼쪽 정렬 후 오른쪽에 문자를 채움
  e.g. select rpad('Hello World', 20, '#') from dual;


<< 공백/ 특정 문자 제거 >>

ltrim(문자열, 삭제 대상) : 
- 왼쪽의 공백 or 특정 표기 없애기
e.g. select ltrim( 'aaaHello Worldaaa', 'a') from dual;
e.g. select ltrim( '    Hello World   ') from dual;

rtrim(문자열, 삭제 대상): 
- 오른쪽의 공백 or 특정 표기 없애기
e.g. select rtrim( 'aaaHello Worldaaa', 'a') from dual;
e.g. select rtrim( '    Hello World   ') from dual;
e.g. select last_name from employees;
     select last_name as 이름, ltrim(last_name, 'A') as 변환
     from employees;

trim(문자열, 삭제 대상) : 
- 앞뒤의 특정 문자 제거
e.g. select trim('   Hello World   ') from dual;
e.g. select last_name, trim('A' from last_name) from employees;


===============================================================

[ 데이터 정렬 ]
올림차순:
  order by 변수1, ... 변수n;
  e.g. SELECT * FROM book
       order by price,bookname;
        ==>  먼저 쓰여진 변수의 기준으로 소팅되고, 
             동급이 있는 경우 그 다음 변수의 기준으로 소팅

내림차순:
  order by 변수 desc;
  e.g. SELECT * FROM book
       ORDER BY price DESC;

올림차순+내림차순 같이 쓸 때:
  order by 변수명1 asc, 변수명2 desc;
  e.g. select*from employees 
       order by salary asc, last_name desc;


===============================================================

[ 계산하여 새로운 변수로 데이터 선택할 때 ]

- 합계: sum 함수 사용
  sum(변수명) as 새로운변수명
  ** as는 제외해도 됨
  e.g. select sum(saleprice) as total
       from orders;
        ==> orders 테이블에서 saleprice 변수의 데이터를 모두 더해서 
            'total'이라는 새로운 변수명으로 데이터 정리

- 평균: avg 함수 사용
  e.g. select avg(saleprice) as average
       from orders;

- 최대값: max 함수 사용
  e.g. select max(saleprice) as maximum
       from orders;

- 최소값: min 함수 사용
  e.g. select min(saleprice) as minimum
       from orders;

- 절대값: abs (-음수), abs(+양수) 
  e.g. select abs(-78), abs(+78)
       from dual;
       ==> 테이블 없이 계산할 때는 from 뒤에 'dual'을 붙임

- 반올림: round(반올림할 숫자, 표기할 소수점 자리)
  e.g. select round(4.785,1)
       from dual;
  e.g. select custid as 고객번호, round(avg(saleprice),-2) as 평균주문금액
       from orders
       group by custid;
        ==> 소수점 자리일 경우 1처럼 양수 표기로, 
            소수점 이상의 자리 (e.g. 10의자리, 100의 자리)인 경우 
            -2와 같이 음수 표기 넣어줘야 함

- 버림 함수: trunc(값, 자리수)
  e.g. select trunc(45.5555,1) from dual;
       ==> 소수 1번째 자리까지만 제공, 그 아래는 버림 (round 없이 버림)

- 올림 함수: ceil(값)
  e.g. select ceil(45.111) from dual;
       ==> 소수점자리에 뭐가 들어있든 상관없이 현재 1의 자리에 들어 있는 숫자에서 1 올림

- 나머지: mod(무엇을, 뭘로 나눌지):
  e.g. lect mod(10,3) from dual;
  ** 변수명을 집어넣고 나머지 값이 몇인 경우, 로 조건 걸어서 테이블 출력도 가능:
  e.g. select * from employees where mod (employee_id,2)=1; 
       ==> employee_id가 홀수인 경우만 출력 (사번을 2로 나누었을 때 나머지가 1인 경우)

- 데이터를 구간별로 자를 때: width_bucket(지정값, 최소값, 최대값, bucket/구간 개수)
  e.g. select max(salary) max, min(salary) min from employees;
       select salary, width_bucket(salary,2100,24001,5) as grade
       from employees;
       ==> salary의 최대, 최소값을 확인하고  
           salary는 최소값인 2100, 최대값인 240001 으로 이루어져있고, 이를 5로 나눈 후 "등급"으로 표기하여 제시
        


===============================================================

[ 다른 테이블에 있는 데이터들 선택하여 함께 보기 ]

join 을 쓸 수도 있고 
"테이블명.변수명" + where 로 불러와 출력도 가능
and도 가능


- "테이블명.변수명" + where :
  e.g. select customer.name, orders.custid, sum(orders.saleprice) as "총 판매액"
       from orders, customer
       where orders.custid=2 and orders.custid=customer.custid
       group by customer.name, orders.custid;

  e.g. select name, saleprice
       from customer, orders
       where customer.custid=orders.custid;

  e.g. select C.name, B.bookname
       from customer C, book B, orders O
       where C.custid=O.custid and O.bookid=B.bookid;

** 두 테이블에서 설렉해서 뽑을 때 양쪽 테이블의 길이가 같지 않다면, 더 없는 테이블쪽에 + 표기를 넣어서 사용
    e.g. Q. 도서를 구매하지 않은 고객을 포함하여 고객의 이름과 고객이 주문한 도서의 판매가격을 구하시오
         select C.name, O.saleprice
         from customer C, orders O
         where C.custid=O.custid(+);
         ==> orders에 빈값이 생기니까 orders 에 + 넣어줌

Join:
- 2개 이상의 테이블을 연결하여 관련된 데이터를 결합할 때 사용
- 여러가지 타입의 조인이 있음.
  1. 내부 조인 (inner join) : 
      - 교집합
        e.g. select customer.name, orders.custid, sum(orders.saleprice)
             from orders
             inner join customer on orders.custid=customer.custid
             where orders.custid=2
             group by customer.name, orders.custid;
      
        e.g. select customer.name, book.bookname
             from orders
             inner join customer on orders.custid=customer.custid
             inner join book on orders.bookid=book.bookid;

** outer join은 조인하는 여러테이블에서 한 쪽에는 데이터가 있고, 한 쪽에는 데이터가 없는 경우, 
   데이터가 있는 쪽 테이블의 내용을 모두 출력함. 
   즉, 조건에 맞지 않아도 해당하는 행을 출력하고 싶을 때 사용할 수 있음

  2. 왼쪽 외부 조인 (Left Outer Join) : 
      - 두번째 테이블에 일치하는 데이터가 없는 경우 null값이 사용
        e.g. select customer.name, orders.saleprice
             from customer
             left outer join orders on customer.custid=orders.custid;

  3. 오른쪽 외부 조인 (Right Outer Join) : 
      - 첫번째 테이블에 일치하는 데이터가 없는 경우  null 값 사용
        e.g. select customer.name,orders.saleprice
             from customer
             right outer join
             orders on customer.custid=orders.custid;

  4. Full Outer Join : 
      - 일치하는 데이터가 없는 경우 해당 테이블에서는 null값이 사용

         e.g. select customer.name, orders.saleprice
         from customer
         full outer join orders on customer.custid=orders.custid;

  5. Cross Join : 
      - 두 테이블 간의 모든 가능한 조합을 생성
        e.g. select customer.name, orders.saleprice
             from customer
             cross join orders;

and:
e.g. select employee_id 사번, 
     first_name||''|| last_name as 이름, j.job_id 업무, j.job_title 업무명
     from employees e, jobs j
     where e.employee_id=120
     and e.job_id=j.job_id;


===============================================================

[ 부속 질의 (subquery) ]

부속질의란 하나의 SQL 문 안에 또다른 SQL 문이 삽입되는 것
다른 테이블에서 가져온 데이터로 현재 테이블에 있는 정보를 찾거나 가공할 때 사용

기본 형태: 
select 보고자하는 변수명
from 해당 변수가 속한 테이블명
where 해당 변수를 다른 테이블에서 참조할 때 사용할 수 있는 공통 변수 (select 공통 변수 from 참조 테이블);


e.g. Q. 도서를 구매할 적이 있는 고객의 이름을 검색하시오.
     select name
     from customer
     where custid in (select custid from orders);
     ==> orders 테이블에 custid가 있는 고객의 이름을 출력하라는 뜻

e.g. Q. ‘대한미디어’에서 출판한 도서를 구매한 고객의 이름을 보이시오.
     select name
     from customer
     where custid in (select custid from orders
     where bookid in (select bookid from book 
     where publisher='대한미디어'));

e.g. Q. 출판사별로 출판사의 평균 도서 가격보다 비싼 도서를 구하시오.
     select b1.bookname
     from book b1
     where b1.price>(select avg(b2.price)
     from book b2
     where b2.publisher=b1.publisher);
     ==> 동일 테이블 내에서 데이터를 가져오는데, 가져올 때 2개로 나눠서 쿼리를 정리함
         bookname을 가져올 b1과 price 조건을 걸 b2

e.g. Q. 도서를 주문하지 않은 고객의 이름을 보이시오.
     select name 
     from customer 
     where custid not in (select custid from orders);

e.g. Q. '대한민국’에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
    select sum(saleprice) as 총판매액
    from orders
    where custid in (select custid from customer where address like '대한민국%');


===============================================================

[ 데이터 내 내용 대체/수정/변경 ]

- 기존 문자열을 다른 문자열로 대체:
replace(변수명, '수정할 문자열', '대체할 문자열')
  e.g. select bookid, replace(bookname, '야구', '농구') bookname, publisher, price
       from book;

- 기존 들어가 있는 값을 다른 내용으로 일괄 처리:
decode(변수명, 코드1, '코드1 대체값',...,코드n, '코드n 대체값', 'default값') 
** default값 == 대체값으로 재수정하지 않는 나머지 케이스들을 어떻게 표기할건지 작성
  e.g. select last_name, department_id,
       decode (department_id,
          90, '경영지원실',
          60, '프로그래머',
          100, '인사부',
          '기타') -- <== 지정되지 않은 케이스는 모두 default로 '기타' 처리 
          부서 
       from employees;
e.g. Q. employees 테이블에서 commission_pct가 null이 아닌 경우 'A'를, null인 경우 'N'을 표시하는 쿼리를 작성
        select commission_pct as commission,
            decode(commission_pct, null, 'N','A') as 변환
        from employees
        order by 변환 desc;

case : 
  - decode() 함수와 유사
  - 하지만, decode() 함수는 단순한 조건 비교에 사용되는 반면
    case() 함수는 다양한 비교연산자로 조건을 제시 가능
  - CASE 문은 조건에 따라 다른 값을 반환하는 데 사용되며, 
    DECODE보다 복잡한 조건을 표현할 수 있음
  - 기본 형태: 
    CASE WHEN condition THEN result ... ELSE default END 
  e.g. select last_name, department_id,
       case 
       when department_id=90 then '경영지원실' -- <= ~ 조건에 대해 부합할 경우 '경영지원실'로 코딩
       when department_id=60 then '프로그래머'
       when department_id=100 then '인사부'
       else '기타' -- <== 위 케이스들에 해당되지 않는 남은 케이스들은 모두 '기타'로 표기
       end as 소속 -- <== 재정리한 이 데이터들은 '소속'이라는 새 이름으로 담음 
       from employees;
  e.g. select last_name, salary,
       case
       when salary>=20000 then 'a'
       when salary>10000 and salary<20000 then 'b'
       else 'c'
       end as 등급
       from employees;


===============================================================

[ 날짜 관련 수정 ]

- 데이터 날짜로 표기할 때:
to_date('2024-05-20','YYYY-MM-DD')
to_date('2024-05-20 15:45:30','YYYY-MM-DD HH24:MI:SS')

- 날짜 제시 방식을 바꾸고 싶을때:
to_char(변수명, '제시 방식')
e.g. select orderid 주문번호, to_char(orderdate,'yyyy-mm-dd day') 주문일, custid 고객번호, bookid 도서번호
     from orders
     where orderdate='2020-07-07';
e.g. select first_name||' '|| last_name as 이름, hire_date
     from employees
     where to_char (hire_date, 'YY/MM') between '05/01' and '05/06';
     ==> first_name, last_name 합쳐서 '이름'으로 보이도록 하고
         hire_date가 05/01 ~ 05/06 사이인 케이스를 뽑기 

--to_char( 숫자 )   숫자를 문자로 변환
--9      한 자리의 숫자 표현      ( 1111, ‘99999’ )      1111   
--0      앞 부분을 0으로 표현      ( 1111, ‘099999’ )      001111
--$      달러 기호를 앞에 표현      ( 1111, ‘$99999’ )      $1111
--.      소수점을 표시         ( 1111, ‘99999.99’ )      1111.00
--,      특정 위치에 , 표시      ( 1111, ‘99,999’ )      1,111
--MI      오른쪽에 - 기호 표시      ( 1111, ‘99999MI’ )      1111-
--PR      음수값을 <>로 표현      ( -1111, ‘99999PR’ )      <1111>
--EEEE      과학적 표현         ( 1111, ‘99.99EEEE’ )      1.11E+03
--V      10을 n승 곱한값으로 표현   ( 1111, ‘999V99’ )      111100
--B      공백을 0으로 표현      ( 1111, ‘B9999.99’ )      1111.00
--L      지역통화         ( 1111, ‘L9999’ )

*** EEEE : E+숫자 이면 그 숫자만큼 소수점 위로, E-이면 그 숫자만큼 소수점 아래로...?
    e.g. select to_char(12345678,'9.999EEEE') from dual;
         ==> 결과 :   1.235E+07
             ==> 원래 숫자는 총 8자리. 
                 이 8자리 숫자를 소수 1의 자리에서 표현을 해야함.
                 첫번째 숫자는 소수 1의 자리가 되고, 나머지 7개는 소수점 아래로 들어가야하는데
                 EEEE 앞에 붙은건 소수 3번째 자리까지만을 얘기함
                 따라서, 4번째자리가 반올림된 상태로 3번째짜리까지 표현이 되고, 
                 소수점 아래로 밀린 총 7개의 숫자를 표현하기 위해서 E+07로 표기됨 
                 

< 날짜 연산 >
- 서버에 설정된 현재 날짜/시간 정보가 필요할 때
sysdate 
e.g. select sysdate from dual;
     ==> 그냥 지금 당장의 날짜를 보여줌

e.g. select sysdate, to_char(sysdate, 'yyyy-mm-dd HH:MI:SS day') sysdate1
     from dual;
     ==> DBMS 서버에 설정된 현재 날자와 시간, 요일을 확인

- days 수로 계산할 때:
변수명+연산하려는 날짜 
e.g. select orderid,orderdate as 주문일, orderdate+10 as 확정일자
     from orders;

- month 단위로 계산이 필요하면:
add_months(변수명, 몇 개월)
e.g. select orderid, orderdate 주문일, add_months(orderdate,2) as 확정일자
     from orders;

- 현재 시스템 날짜로부터 특정 날짜 계산할 때:
변수명부터 오늘까지 : sysdate-변수명(계산하고자하는 날짜가 들어있는)
오늘부터 변수명까지 : 변수명(계산하고자하는 날짜가 들어있는)-sysdate
e.g. select*from employees;
     select last_name, sysdate, hire_date, round(sysdate-hire_date) 근무기간 from employees;

- 해당 월의 마지막 "날짜"를 반환하는 함수 :
last_day(변수명) 
e.g. select last_name, hire_date, last_day(hire_date) from employees;
     ==> hire_date의 달의 마지막 날짜 확인하여 YY/MM/DD 형태로 보여줌
e.g. select last_name, hire_date, last_day(add_months(hire_date,1)) from employees;
     ==> hire_date에서 1개월 더한 월의 마지막 날짜

- 해당 날짜를 기준으로 다음에 오는 "요일"에 해당하는 날짜를 반환
next_day(변수명, 요일 혹은 요일을 뜻하는 숫자) : 
  ==> 일~ 토, 1~7로 표현 가능
e.g. select hire_date, next_day(hire_date,'월') from employees;
e.g. select hire_date, next_day(hire_date,2) from employees; 
     ==> 월요일==2 여서 () 안에 2를 넣어도 '월'과 동일하게 반환

- 날짜와 날짜 사이의 개월수 구하기
months_between((시작 날짜, 종료 날짜),소수점 자리 수)
==> 개월 수를 소수점 첫째 자리까지 반올림
e.g. select employee_id, hire_date, round(months_between(sysdate, hire_date),1) from employees;
     ==> hire_date부터 현재까지의 개월수를 소수 1번째 자리까지 반올림함


< 날짜/ 시간 관련 형식 >
------ << 년도 >> ------
--YYYY       네 자리 연도
--YY      두 자리 연도
--YEAR      연도 영문 표기
------ << 월 >> ------
--MM      월을 숫자로
--MON      월을 알파벳으로
------ << 일 >> ------
--DD      일을 숫자로
--DAY      요일 표현
------ << 요일 >> ------
--DY      요일 약어 표현
--D      요일 숫자 표현
------ << 시간 >> ------
--AM 또는 PM   오전 오후
--HH 또는 HH12   12시간
--HH24      24시간
--MI      분
--SS      초



===============================================================

** 동일 테이블 내의 데이터를 여러 계산 혹은 조합으로 묶어 새로 보려고 할 경우
   테이블이 다수 있는 것처럼 가상의 테이블을 만들어서 쿼리를 작성할 수도 있음

e.g. 
select o1.orderid 주문번호, o1.saleprice 금액
from orders o1
where o1.saleprice<=(select avg(o2.saleprice)from orders o2);

e.g. 
select b1.bookname
from book b1
where b1.price>(select avg(b2.price)
from book b2
where b2.publisher=b1.publisher);

===============================================================

NVL 함수:
기본 형태: NVL("값/변수명", "지정값")
e.g. select name 이름, NVL(phone,'연락처없음') 전화번호
     from customer;
     select*from customer;
e.g. select last_name, manager_id,
     nvl(to_char(manager_id), 'CEO') from employees;
e.g. select last_name, manager_id,
     nvl(to_char(manager_id), 'CEO') revised_id from employees;


rownum 함수:
오라클에서 자동으로 제공하는 가상 열로 쿼리가 진행되는 동안 각 행에 일련번호를 자동으로 할당
e.g. select rownum 순번, custid 고객번호, name 이름, phone 전화번호
     from customer
     where rownum<3;

