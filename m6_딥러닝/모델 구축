<< 간단한 모델 구축 스텝 >>

0. 관련 모듈 불러오기
1. 데이터 불러오기
2. 데이터 정규화 (필요시)
3. 모델 정의
4. 모델 컴파일링
5. 모델 학습
6. 모델 평가

e.g. 이미지 데이터 모델 구축

0. 관련 모듈 불러오기
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras import layers, models

1. 데이터 불러오기 & 준비
(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

2. 데이터 정규화 및 벡터로 변환
# reshape the images to have a single color channel and normalize pixel values
train_images = train_images/255
test_images = test_images/255

# 이미지 데이터를 1D 벡터로 변환 (28*28 이미지를 784 크기의 벡터로 변환)
train_images=train_images.reshape((-1, 28*28))
test_images=test_images.reshape((-1, 28*28))

# one-hot 인코딩
# Convert the labels to one-hot encoded vectors
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

3. 모델 정의
model=models.Sequential([
    layers.InputLayer(shape=(28*28,)), # 입력 계층 및 첫번재 dense 계층
    layers.Dense(512, activation='relu'), 
    layers.Dense(256, activation='relu'), # 두번째 dense 계층
    layers.Dense(10, activation='softmax') # 세번째 dense 계층
])

4. 모델 컴파일링
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

5. 모델 학습
model.fit(train_images, train_labels, epochs=5, batch_size=64)

6. 모델 평가 및 결과 출력
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc}")


================================================================

<< PyTorch >>
- 클래스 상속을 받아 사용하는 게 tensorflow keras 와 다름


1. 데이터셋 전처리 과정 정의 
    e.g. 이미지를 PyTorch 텐서로 변환 // 텐서로 변환 시킨 이미지 데이터 표준화 시키기
2. 데이터셋 로드
3. 데이터셋을 훈련 및 검증 세트로 분할
4. 모델 아키텍쳐 정의
    - 각 레이어에 대한 정의
    - class로 만들어서 추후 객체화 시켜 사용할 수 있도록
5. 모델 인스턴스 생성
6. 손실 함수 및 최적화 알고리즘 지정
7. 모델 훈련
8. 모델 검증
9. 모델 평가










